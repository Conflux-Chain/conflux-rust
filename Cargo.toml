# Use workspace section to allow test all cases under root folder (cargo test --all).
[workspace]
members = [
    # bins
    "bins/cfx_store",
    "bins/cfx_key",
    "bins/conflux",
    "bins/evm-spec-tester",
    "bins/consensus_bench",
    # libs
    "crates/cfx_bytes",
    "crates/cfx_types",
    "crates/cfx_addr",
    "crates/stratum",
    "crates/accounts",
    "crates/blockgen",
    "crates/cfx_key",
    "crates/cfx_store",
    "crates/dbs/db",
    "crates/dbs/kvdb-rocksdb",
    "crates/dbs/db-errors",
    "crates/network",
    "crates/primitives",
    "crates/secret_store",
    "crates/transactiongen",
    "crates/cfxcore/core",
    "crates/execution/execute-helper",
    "crates/execution/executor",
    "crates/cfxcore/internal_common",
    "crates/cfxcore/packing-pool",
    "crates/parameters",
    "crates/dbs/statedb",
    "crates/dbs/storage",
    "crates/execution/vm-interpreter",
    "crates/execution/vm-types",
    "crates/util/cfx_math",
    "crates/execution/cfx-vm-tracer-derive",
    "crates/util/dag",
    "crates/util/delegate",
    "crates/util/heap-map",
    "crates/util/hibitset",
    "crates/util/io",
    "crates/util/link-cut-tree",
    "crates/util/log_device",
    "crates/util/malloc_size_of",
    "crates/util/malloc_size_of_derive",
    "crates/util/memory-cache",
    "crates/util/metrics",
    "crates/util/priority-send-queue",
    "crates/util/random_crash",
    "crates/util/sha3-macro",
    "crates/execution/solidity-abi",
    "crates/execution/solidity-abi-derive",
    "crates/util/throttling",
    "crates/util/treap-map",
    "crates/util/version",
    "crates/util/serde_utils",
    "crates/execution/geth-tracer",
    "crates/rpc/rpc-eth-types",
    "crates/rpc/rpc-primitives",
    "crates/rpc/rpc-cfx-types",
    "crates/rpc/rpc-eth-api",
    "crates/rpc/parity-trace-types",
    "crates/rpc/rpc-eth-impl",
    "crates/rpc/rpc-common-impl",
    "crates/util/util-macros",
    "crates/rpc/rpc-utils",
    "crates/rpc/rpc-builder",
    "crates/rpc/rpc-cfx-impl",
    "crates/pos/common/bounded-executor",
    "crates/pos/common/crash-handler",
    "crates/pos/common/fallible",
    "crates/pos/common/infallible",
    "crates/pos/common/logger",
    "crates/pos/common/metrics",
    "crates/pos/common/metrics-core",
    "crates/pos/common/nibble",
    "crates/pos/common/num-variants",
    "crates/pos/common/proptest-helpers",
    "crates/pos/common/proxy",
    "crates/pos/common/short-hex-str",
    "crates/pos/common/subscription-service",
    "crates/pos/common/temppath",
    "crates/pos/common/time-service",
    # "crates/pos/config/generate-key",
    "crates/pos/config/global-constants",
    "crates/pos/consensus/consensus-types",
    "crates/pos/config/config",
    "crates/pos/consensus/executor",
    "crates/pos/consensus/safety-rules",
    "crates/pos/crypto/crypto",
    "crates/pos/crypto/crypto-derive",
    "crates/pos/secure/net",
    "crates/pos/secure/push-metrics",
    "crates/pos/secure/storage",
    "crates/pos/storage/accumulator",
    "crates/pos/storage/cached-pos-ledger-db",
    "crates/pos/storage/jellyfish-merkle",
    "crates/pos/storage/pos-ledger-db",
    "crates/pos/storage/schemadb",
    "crates/pos/storage/scratchpad",
    "crates/pos/storage/state-view",
    "crates/pos/storage/storage-interface",
    "crates/pos/types/executor-types",
    "crates/pos/types/move-core-types",
    "crates/pos/types/pow-types",
    "crates/pos/types/types",
    "crates/pos/config/management/network-address-encryption",
    "crates/rpc/rpc-middlewares",
    "crates/tasks",
    "crates/eest_types",
    "crates/config",
]

resolver = "2"

[workspace.package]
version = "2.4.0"
authors = ["peilun-conflux", "ChenxingLi"]
description = "A rust implementation of the Conflux-Protocol"
documentation = "https://doc.confluxnetwork.org"
homepage = "https://confluxnetwork.org/"
keywords = ["Conflux"]
repository = "https://github.com/conflux-chain/conflux-rust"
license-file = "LICENSE"

[profile.test]
debug-assertions = true

[profile.test.package]
parity-secp256k1 = { opt-level = 3 }

[profile.bench]
debug-assertions = true
overflow-checks = true

[profile.release]
overflow-checks = true
# Temporarily run with debug assertion before main-net release.
debug-assertions = true

[workspace.dependencies]
cfxkey = { path = "./crates/cfx_key" }
cfx-math = { path = "./crates/util/cfx_math" }
solidity-abi = { path = "./crates/execution/solidity-abi" }
random-crash = { path = "./crates/util/random_crash" }
memory-cache = { path = "./crates/util/memory-cache" }
priority-send-queue = { path = "./crates/util/priority-send-queue" }
heap-map = { path = "./crates/util/heap-map" }
treap-map = { path = "./crates/util/treap-map" }
hibitset = { path = "./crates/util/hibitset" }
malloc_size_of = { path = "./crates/util/malloc_size_of" }
delegate = { path = "./crates/util/delegate" }
throttling = { path = "./crates/util/throttling" }
malloc_size_of_derive = { path = "./crates/util/malloc_size_of_derive" }
link-cut-tree = { path = "./crates/util/link-cut-tree" }
sha3-macro = { path = "./crates/util/sha3-macro" }
dag = { path = "./crates/util/dag" }
cfx-vm-tracer-derive = { path = "./crates/execution/cfx-vm-tracer-derive" }
parity-version = { path = "./crates/util/version" }
#log-device = { path = "./crates/util/log_device" }
solidity-abi-derive = { path = "./crates/execution/solidity-abi-derive" }
io = { path = "./crates/util/io" }
metrics = { path = "./crates/util/metrics" }
cfx-bytes = { path = "./crates/cfx_bytes" }
primitives = { path = "./crates/primitives" }
cfx-types = { path = "./crates/cfx_types" }
client = { path = "./crates/client" }
cfx-stratum = { path = "./crates/stratum" }
txgen = { path = "./crates/transactiongen" }
blockgen = { path = "./crates/blockgen" }
serde-utils = { path = "./crates/util/serde_utils" }
db = { path = "./crates/dbs/db" }
cfx-db-errors = { path = "./crates/dbs/db-errors" }
cfx-statedb = { path = "./crates/dbs/statedb" }
cfx-storage = { path = "./crates/dbs/storage" }
kvdb-rocksdb = { path = "./crates/dbs/kvdb-rocksdb" }
cfx-addr = { path = "./crates/cfx_addr" }
cfxcore-accounts = { path = "./crates/accounts" }
secret-store = { path = "./crates/secret_store" }
cfxstore = { path = "./crates/cfx_store" }
network = { path = "./crates/network" }
cfxcore = { path = "./crates/cfxcore/core" }
cfx-parameters = { path = "./crates/parameters" }
cfx-execute-helper = { path = "./crates/execution/execute-helper" }
cfx-executor = { path = "./crates/execution/executor" }
cfx-packing-pool = { path = "./crates/cfxcore/packing-pool" }
cfx-vm-interpreter = { path = "./crates/execution/vm-interpreter" }
geth-tracer = { path = "./crates/execution/geth-tracer" }
cfx-vm-types = { path = "./crates/execution/vm-types" }
cfx-internal-common = { path = "./crates/cfxcore/internal_common" }
cfx-rpc-eth-types = { path = "./crates/rpc/rpc-eth-types" }
cfx-rpc-primitives = { path = "./crates/rpc/rpc-primitives" }
cfx-rpc-cfx-types = { path = "./crates/rpc/rpc-cfx-types" }
cfx-parity-trace-types = { path = "./crates/rpc/parity-trace-types" }
cfx-rpc-eth-api = { path = "./crates/rpc/rpc-eth-api" }
cfx-util-macros = { path = "./crates/util/util-macros" }
cfx-rpc = { path = "./crates/rpc/rpc-eth-impl" }
cfx-rpc-utils = { path = "./crates/rpc/rpc-utils" }
cfx-rpc-builder = { path = "./crates/rpc/rpc-builder" }
cfx-rpc-cfx-impl = { path = "./crates/rpc/rpc-cfx-impl" }
cfx-rpc-common-impl = { path = "./crates/rpc/rpc-common-impl" }
cfx-rpc-middlewares = { path = "./crates/rpc/rpc-middlewares" }
bounded-executor = { path = "./crates/pos/common/bounded-executor" }
#diem-channel = { path = "./crates/pos/common/channel", package = "channel" }
channel = { path = "./crates/pos/common/channel" }
crash-handler = { path = "./crates/pos/common/crash-handler" }
fallible = { path = "./crates/pos/common/fallible" }
diem-infallible = { path = "./crates/pos/common/infallible" }
diem-logger = { path = "./crates/pos/common/logger" }
diem-metrics = { path = "./crates/pos/common/metrics" }
diem-metrics-core = { path = "./crates/pos/common/metrics-core" }
diem-nibble = { path = "./crates/pos/common/nibble" }
num-variants = { path = "./crates/pos/common/num-variants" }
diem-proptest-helpers = { path = "./crates/pos/common/proptest-helpers" }
proxy = { path = "./crates/pos/common/proxy" }
short-hex-str = { path = "./crates/pos/common/short-hex-str" }
subscription-service = { path = "./crates/pos/common/subscription-service" }
diem-temppath = { path = "./crates/pos/common/temppath" }
diem-time-service = { path = "./crates/pos/common/time-service" }
#generate-key = { path = "./crates/pos/config/generate-key" }
diem-global-constants = { path = "./crates/pos/config/global-constants" }
diem-config = { path = "./crates/pos/config/config" }
consensus-types = { path = "./crates/pos/consensus/consensus-types" }
executor = { path = "./crates/pos/consensus/executor" }
safety-rules = { path = "./crates/pos/consensus/safety-rules" }
diem-crypto = { path = "./crates/pos/crypto/crypto" }
diem-crypto-derive = { path = "./crates/pos/crypto/crypto-derive" }
diem-secure-net = { path = "./crates/pos/secure/net" }
diem-secure-push-metrics = { path = "./crates/pos/secure/push-metrics" }
diem-secure-storage = { path = "./crates/pos/secure/storage" }
accumulator = { path = "./crates/pos/storage/accumulator" }
cached-pos-ledger-db = { path = "./crates/pos/storage/cached-pos-ledger-db" }
diem-jellyfish-merkle = { path = "./crates/pos/storage/jellyfish-merkle" }
pos-ledger-db = { path = "./crates/pos/storage/pos-ledger-db" }
schemadb = { path = "./crates/pos/storage/schemadb" }
scratchpad = { path = "./crates/pos/storage/scratchpad" }
diem-state-view = { path = "./crates/pos/storage/state-view" }
#storage-client = { path = "./crates/pos/storage/storage-client" }
storage-interface = { path = "./crates/pos/storage/storage-interface" }
executor-types = { path = "./crates/pos/types/executor-types" }
move-core-types = { path = "./crates/pos/types/move-core-types" }
pow-types = { path = "./crates/pos/types/pow-types" }
diem-types = { path = "./crates/pos/types/types" }
diem-network-address-encryption = { path = "./crates/pos/config/management/network-address-encryption" }
cfx-tasks = { path = "./crates/tasks" }
eest_types = { path = "./crates/eest_types" }
cfx-config = { path = "./crates/config" }

# basics
bytes = "1.9"
byte-unit = "1.1.0"
libc = "0.2"
smallvec = "1.4"

# proc-macros
proc-macro2 = "1.0"
quote = "1.0"
syn = "1.0"
proc-macro-crate = "3"

serde = { version = "1.0", features = [
    "derive",
    "alloc",
    "rc"
], default-features = false }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
serde_derive = { version = "1.0", default-features = false }
hex = "0.4.3"
rustc-hex = "2.1"
hex-literal = "0.4.1"

# error handling
fail = "0.5.1"
thiserror = "2.0.11"
anyhow = "1.0"

# parallelism
parking_lot = "0.12"
rayon = "1.10"
threadpool = "1.7"
crossbeam-deque = "0.8"
crossbeam-channel = "0.5"
atom = "0.3"

# alloy & revm
alloy-sol-types = "0.7.2"
alloy-primitives = "0.7.2"
alloy-rpc-types = { git = "https://github.com/alloy-rs/alloy", rev = "4e22b9e" }
alloy-rpc-types-trace = { git = "https://github.com/alloy-rs/alloy", rev = "4e22b9e" }
revm = { version = "8.0", default-features = false }

# jsonrpc framework(old)
jsonrpc-core = "18.0.0"
jsonrpc-tcp-server = "18.0.0"
jsonrpc-http-server = "18.0.0"
jsonrpc-derive = "18.0.0"
jsonrpc-pubsub = "18.0.0"
jsonrpc-ws-server = "18.0.0"

# jsonrpc framework(new)
jsonrpsee = "0.24.4"
jsonrpsee-core = "0.24"
jsonrpsee-types = "0.24"

# async
tokio = "1.44.2"
tokio-stream = "0.1.11"
tokio-test = "0.4.1"
futures = "0.3.30"
futures-util = "0.3"
hyper = "1.3"
hyper-util = "0.1.8"
async-trait = "0.1"
tower = "0.4"
pin-project = "1.0.12"
mio = "0.6.8"
reqwest = "0.12"
# old version tokio 0.2
tokio02 = { version = "0.2", package = "tokio", features = ["full"] }

# crypto & hash
#fixed-hash = "0.5"
keccak-hash = "0.5"
tiny-keccak = "2.0.2"
bls-signatures = { git = "https://github.com/Conflux-Chain/bls-signatures.git", rev = "fb52187df92d27c365642cb7e7b2aaf60437cf9c", default-features = false, features = [
    "multicore",
    "blst",
] }
blst = "0.3"
#secp256k1 = "0.30.0"
#rustls = "0.21"
hashbrown = "0.7.1"

# cli arg parsing
clap = "2" # outdated, need to migrate to clap 4
clap4 = { version = "4", package = "clap" }
docopt = "1.0"
clap-verbosity-flag = "3"

# rand & rng
rand = "0.7"
rand_xorshift = "0.2"
rand_08 = { package = "rand", version = "0.8" }
rand_chacha = "0.2.1"

# misc
log = "0.4"
log4rs = "1.3.0"
env_logger = "0.11"
lazy_static = "1.4"
itertools = "0.14"
once_cell = "1.17.1"
byteorder = "1.2.7"
strum = "0.26"
strum_macros = "0.26"
toml = "0.5.8"
app_dirs = "1.2.1"
slab = "0.4"
rpassword = "5.0.1"
static_assertions = "1.1.0"
transient-hashmap = "0.4"
num_cpus = "1.6"
tempfile = "3"
bcs = "0.1.3"
order-stat = "0.1"
matches = "0.1"
siphasher = "0.3"
natpmp = "0.2"
enum-map = "0.4.0"
#enum-map-derive = "0.4.0"
igd = "0.10"
ipnetwork = "0.12.6"
derivative = "2.0.2"
edit-distance = "2"
zeroize = "1"
vergen = "8.3.2"
target_info = "0.1"
bit-set = "0.4"
typenum = "1.17.0"
typemap = { package = "typemap-ors", version = "1.0"}
impl-trait-for-tuples = "^0.2"
impl-tools = "^0.10"
derive_more = "0.99"
c-kzg = { version = "1.0.2", default-features = false }
strfmt = "0.1"
smart-default = "0.6.0"
num-derive = { version = "0.4.2", default-features = false }
mirai-annotations = { version = "1.10.1", default-features = false }
rangetools = "0.1.4"
# prometheus = { version = "0.7.0", default-features = false }
primal = "0.2.3"
memoffset = "0.5.1"
either = "1.5.3"
fallible-iterator = "0.2"
fs_extra = "1.1.0"
fs-swap = "0.2.4"
regex = "1.3.1"
cfg-if = "0.1"
unroll = "0.1.5"
winapi = "0.3.7"
synstructure = "0.12"
lru-cache = "0.1"
lru_time_cache = "0.9.0"
slice-group-by = "0.3.1"
auto_impl = "1"
dyn-clone = "1.0.17"
enumn = "0.1.14"
walkdir = "2.5"

# num misc
bigdecimal = "0.1.0"
num-bigint = "0.2.6"
num = "0.2"
num-traits = { version = "0.2.8", default-features = false }

# time misc 
timer = "0.2"
time = "0.3"
chrono = "0.4"
duration-str = "0.17"

# parity crates
rlp = "0.4.0"
rlp_derive = { package = "rlp-derive", version = "0.2.0" }
panic_hook = { git = "https://github.com/Conflux-Chain/conflux-parity-deps.git", rev = "09da4dfeecd754df2034d4e71a260277aaaf9783" }
dir = { git = "https://github.com/Conflux-Chain/conflux-parity-deps.git", rev = "09da4dfeecd754df2034d4e71a260277aaaf9783" }
unexpected = { git = "https://github.com/Conflux-Chain/conflux-parity-deps.git", rev = "09da4dfeecd754df2034d4e71a260277aaaf9783" }
ethereum-types = "0.9"
parity-wordlist = "1.3.0"
parity-crypto = "0.9.0"
parity-path = "0.1"
parity-util-mem = { version = "0.5", default-features = false }
parity-secp256k1 = { git = "https://github.com/paritytech/rust-secp256k1.git" }
ctrlc = { git = "https://github.com/paritytech/rust-ctrlc.git", rev = "b523017108bb2d571a7a69bd97bc406e63bc7a9d" }
substrate-bn = { git = "https://github.com/paritytech/bn", rev = "63f8c587356a67b33c7396af98e065b66fca5dda", default-features = false }
ethcore-bytes = "0.1.1"

# misc-testing
similar-asserts = "1.5"
criterion = "0.3.0"
proptest = "1.0.0"
proptest-derive = "0.5.1"

# dbs
sqlite = "0.25"
sqlite3-sys = "0.12"
kvdb = "0.4"
influx_db_client = "0.5.1"
# conflux forked crates
rocksdb = { git = "https://github.com/Conflux-Chain/rust-rocksdb.git", rev = "a2ebf4e00f89c70359d9f3996a1390d9c6b55940" }

[patch.crates-io]
sqlite3-sys = { git = "https://github.com/Conflux-Chain/sqlite3-sys.git", rev = "1de8e5998f7c2d919336660b8ef4e8f52ac43844" }
