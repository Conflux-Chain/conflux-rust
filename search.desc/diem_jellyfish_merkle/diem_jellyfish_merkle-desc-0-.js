searchState.loadedDescShard("diem_jellyfish_merkle", 0, "This module implements <code>JellyfishMerkleTree</code> backed by …\nThe Jellyfish Merkle tree data structure. See <code>crate</code> for …\nNode batch that will be written into db atomically with …\nThe hardcoded maximum height of a <code>JellyfishMerkleTree</code> in …\nIndicates a node becomes stale since <code>stale_since_version</code>.\n<code>StaleNodeIndex</code> batch that will be written into db …\n<code>TreeReader</code> defines the interface between …\nThis is a wrapper of <code>NodeBatch</code>, <code>StaleNodeIndexBatch</code> and …\n<code>Value</code> defines the types of data that can be stored in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets node given a node key. Returns error if the node does …\nGets node given a node key. Returns <code>None</code> if the node does …\nGets the proof that shows a list of keys up to …\nGets the rightmost leaf. Note that this assumes we are in …\nReturns the value (if applicable) and the corresponding …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module implements <code>JellyfishMerkleIterator</code>. …\nCreates a <code>JellyfishMerkleTree</code> backed by the given …\nThe <code>NodeKey</code> identifying the node associated with this …\nNode types of <code>JellyfishMerkleTree</code>\nReturns the new nodes and values in a batch after applying …\nThis module implements the functionality to restore a …\nThe version since when the node is overwritten and becomes …\nWrites a node batch into storage.\nThe <code>JellyfishMerkleIterator</code> implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new iterator. This puts the internal state in …\nEach child of <code>InternalNode</code> encapsulates a nibble forking …\nInput is empty.\nExtra leaf bits set\nA wrapper of <code>InternalNode</code>.\nRepresents a 4-level subtree with 16 children at the …\nA wrapper of <code>LeafNode</code>.\nRepresents an account.\nNo children found in internal node\nThe concrete node type of <code>JellyfishMerkleTree</code>.\nError thrown when a <code>Node</code> fails to be deserialized out of a …\nThe unique key of each node.\nRepresents <code>null</code>.\nThe first byte of the input is not a known tag …\nGets the account key, the hashed account address.\nGets the <code>n</code>-th child.\nRecovers from serialized bytes in physical storage.\nRecovers from serialized bytes in physical storage.\nSerializes to bytes for physical storage enforcing the …\nSerializes to bytes for physical storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a child node key based on this node key.\nGenerates parent node key at the same version based on …\nGenerates <code>existence_bitmap</code> and <code>leaf_bitmap</code> as a pair of <code>u16</code>…\nGets the child and its corresponding siblings that are …\nComputes the hash of nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the node is a leaf node.\nCreates a new <code>NodeKey</code>.\nCreates a new Internal node.\nCreates a new leaf node.\nA shortcut to generate a node key consisting of a version …\nCreates the <code>Internal</code> variant.\nCreates the <code>Leaf</code> variant.\nCreates the <code>Null</code> variant.\nGets the nibble path.\nSets the version to the given version.\nGets the associated value itself.\nGets the version.\nRestores a chunk of accounts. This function will verify …\nFinishes the restoration process. This tells the code that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")