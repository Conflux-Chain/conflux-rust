searchState.loadedDescShard("storage_interface", 0, "Trait that is implemented by a DB that supports certain …\nTrait that is implemented by a DB that supports certain …\nNetwork types for storage service\nThe access path to query with.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the account state corresponding to the given …\nGets the transaction accumulator root hash at specified …\nTODO(lpl): It’s possible to use round number?\nSee <code>DiemDB::get_block_timestamp</code>.\nGet the ledger info of the epoch that <code>known_version</code> …\nSee <code>DiemDB::get_epoch_ending_ledger_infos</code>.\nGets the version of the last transaction committed before …\nSee <code>DiemDB::get_latest_account_state</code>.\nReturns the latest version and committed block timestamp\nReturns the latest ledger info.\nSee <code>DiemDB::get_latest_state_root</code>.\nGets the latest transaction info. N.B. Unlike …\nGets the latest TreeState no matter if db has been …\nReturns the latest ledger info.\nGets information needed from storage during the main node …\nReturns proof of new state relative to version known to …\nReturns proof of new state for a given ledger info with …\nSee <code>DiemDB::get_transactions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the above ledger info doesn’t carry a validator set, …\nThe latest ledger info. This struct is only used locally, …\nThis module provides mock dbreader for tests.\nConstructor.\nConstructor.\nPersist transactions. Called by the executor module when …\nThe version the query is based on.\nThis is a mock of the dbreader in tests.\nReturns the argument unchanged.\nReturns the latest ledger info.\nCalls <code>U::from(self)</code>.\n<code>VerifiedStateView</code> is like a snapshot of the global state …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a <code>VerifiedStateView</code> with persistent state view …")