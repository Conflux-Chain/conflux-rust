searchState.loadedDescShard("cfxcore_types", 0, "Verified roots of blamed headers stored on disk on light …\nThe structure to maintain block data under different views.\n<code>receipts</code> and <code>bloom</code> of a single block after execution. It …\nThe validity status of a block. If a block’s status …\nThe checkpoint information stored in the database\nThe start block number of an epoch. It equals to the past …\nThe local information about a block. It is NOT consistent …\nReturn …\nThe PoW epoch hash where the reward is distributed in its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn None if we do not have a corresponding data in the …\nInsert the latest data with its version. This should be …\nInsert the data with its version and update the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly keep the data in the given <code>version</code>. Called when the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of cached invalid block hashes\nSize of ledger cache.\nSize of the ledger cache.\nCreates new cache config with given details.\nThe maximum number of cached target difficulty values\nBlocks header cache size.\nBlock Receipts cache size.\nBlock Rewards cache size.\nBlock Traces cache size.\nBlocks cache size.\nCollects unused objects from cache. First params is the …\nCompact blocks cache size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock number index cache size.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal block info cache size.\nTotal amount used by the cache.\nTransaction indices cache size.\nImplements an unbounded SPMC broadcast channel.\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nErrors returned by <code>Timeout</code>.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nError returned by <code>try_recv</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors concerning block processing.\nDifficulty is out of range; this can be used as an looser …\nDuplicate parent or referee hashes exist.\nTotal rlp sizes of transactions in block is out of bound.\nThe value in <code>custom</code> does not match the specification.\nDifficulty header field is invalid; this is a strong error …\nGas limit header field is invalid.\nGas used header field is invalid.\nNumber field of header is invalid.\nTotal gas limits of transactions in block is out of bound.\nThe PoS reference violates the validity rule (it should …\nProof-of-work aspect of seal, which we assume is a 256-bit …\nState root header field is invalid.\nTimestamp header field is invalid.\nTransactions root header field is invalid.\nShould have a base fee but it’s not set.\nShould have a PoS reference but it’s not set.\nTimestamp header field is too far in future.\nToo long custom data in header\nToo many referees in a block\nToo many transactions from a particular address.\nBlock has too much gas used.\nShould not have a base fee but it’s set.\nShould not have a PoS reference but it’s set.\nParent given is unknown.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis struct maintains some inner state of consensus graph.\nThis struct maintains some inner state of network layer.\nThis struct maintains some inner state of synchronization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")