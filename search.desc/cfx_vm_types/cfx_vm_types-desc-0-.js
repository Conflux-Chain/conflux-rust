searchState.loadedDescShard("cfx_vm_types", 0, "Action (call/create) input params. Everything else should …\nTransaction value\nApparent value for transaction (not transferred)\n<code>BadInstructions</code> is returned when given instruction is not …\n<code>BadJumpDestination</code> is returned when execution tried to move\nBasic dust accounts will be removed.\nBuilt-in contract failed on given input\nCREATE\nCREATE2\nCALL.\nCALLCODE.\nThe type of the call-like instruction.\nDust accounts cleanup mode.\nCreate a contract on an address with existing contract\nContext for VMs\nResult of externalities create function.\nSpecifies how an address is calculated for a new contract.\nThe type of the create-like instruction.\nReturned when creation was successful. Contains an address …\nDELEGATECALL.\nParameters are included in code\nInformation concerning the execution environment for a …\nBefore CIP-133, block hash is read from <code>Env</code>, same as the …\nContains the error value\nVM errors.\n<code>ExceedStorageLimit</code> is returned when the …\nVirtual Machine interface\nReturned when contract creation failed. Returns the reason …\nReturned when message call failed. Returns the reason so …\nAddress is calculated from block_hash, sender, nonce and …\nAddress is calculated from sender and nonce. Ethereum …\nAddress is calculated from sender, nonce, and code hash. …\nAddress is calculated from sender, salt and code hash. …\nGas Left: either it is a known value, or it needs to be …\nInternal contract failed\nInvalid address\nKnown gas left\nResult of externalities call function.\nWhen execution tries to modify the state in static context\nReturn or Revert instruction must be processed.\nNot a CALL.\nNot a create\nWhen balance is not enough for <code>collateral_for_storage</code>. The …\nDust cleanup is disabled.\nContains the success value\nOut of bounds access in RETURNDATACOPY.\n<code>OutOfGas</code> is returned when transaction execution runs out …\nWhen execution would exceed defined Stack Limit\nWhen execution would exceed defined subroutine Stack Limit\nType of the way parameters encoded\nResume call interface\nResume create interface\nReturn data buffer. Holds memory from a previous call and …\nReverted with REVERT.\nReturned when message call was reverted. Contains gas left …\nExecution has been reverted with REVERT.\nParameters are passed in data section\nDefinition of the cost spec and other parameterisations …\n<code>StackUnderflow</code> when there is not enough stack elements to …\nAfter CIP-133, block hash is read from <code>State</code>\nError from storage.\nSTATICCALL\n<code>SubStackUnderflow</code> when there is not enough stack elements …\nReturned when message call was successful. Contains gas …\nValue that should be transferred\nWasm runtime error\nWasm cost table\nBasic and contract dust accounts will be removed.\nThe total gas used in the block following execution of the …\nReceive address. Usually equal to code_address, except …\nReturns the apparent action value of the U256-convertable …\nThe block author.\nReturns address balance.\nPrice of BALANCE\nBase gas price in CIP-1559, equals to 0 if CIP-1559 has …\nReturns the hash of one of the 256 most recent complete …\nBlockhash instruction gas cost.\nBase gas price to miner according to in CIP-137\nMessage call.\nGas price for <code>*CALL*</code> opcodes\nAdditional gas for creating new account (<code>CALL|CALLCODE</code>)\nStipend for transfer for <code>CALL|CALLCODE</code> opcode when <code>value&gt;0</code>\nType of call\nAdditional gas required for value transfer (<code>CALL|CALLCODE</code>)\nCIP-141: Disable Subroutine Opcodes CIP-142: Transient …\nReturns the chain ID of the blockchain\nChain ID\nCIP-105: Minimal DAO votes requirement based on PoS votes.\nCIP-107: Reduce storage collateral refund.\nCIP-118: Query Unused Storage Points in Internal Contract\nCIP-119: PUSH0 instruction\nCIP-131: Retain Whitelist on Contract Deletion\nCIP-132: Fix Static Context Check for Internal Contracts\nCIP-133: Enhanced Block Hash Query\nCIP-137: Base Fee Sharing in CIP-1559\nCIP-144: Point Evaluation Precompile from EIP-4844\nCIP-145: Fix Receipts upon <code>NotEnoughBalance</code> Error\nCIP-43: Introduce Finality via Voting Among Staked\nCIP-62: Enable EC-related builtin contract\nCIP-64: Get current epoch number through internal contract\nCIP-71: Disable anti-reentrancy\nCIP-78: Correct <code>is_sponsored</code> fields in receipt\nCIP-78: Correct <code>is_sponsored</code> fields in receipt\nCIP-90: A Space that Fully EVM Compatible\nCIP-94: On-chain Parameter DAO Vote\nCIP-97: Remove staking list\nCIP-98: Fix espace bug\nCode being executed.\nAddress of currently executed code.\nHash of currently executed code.\nCalculate new contract address.\nGas price for copying memory\nCreates new contract.\nCost for contract length when executing <code>CREATE</code>\nMaximum code size when creating a contract.\nGas price for <code>CREATE</code> opcode\nType of create\nInput data.\nReturns current depth of execution.\nThe block difficulty.\nDiv operations multiplier.\nPrice for deploying Eip-1820 contract.\nCreate empty <code>ReturnData</code>.\nReturns environment.\nThe epoch height.\nThe magnification of gas storage occupying related …\nDoes it support exceptional failed code deposit\nThis function should be used to execute transaction. It …\nDetermine whether an account exists.\nDetermine whether an account exists and is not null (zero …\nAdditional gas for <code>EXP</code> opcode for each byte of exponent\nGas price for <code>EXP</code> opcode\nReturns code at given address\nBase price of EXTCODECOPY\nReturns code hash at given address\nPrice of EXTCODEHASH\nReturns code size at given address\nPrice of EXTCODESIZE\nFinalized epoch number by PoS view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas paid up front for transaction execution\nThe block gas limit.\nGas price.\nThe spec when Conflux launches the mainnet. It should …\nGrow memory cost, per page (64kb)\nWhether create2 extern function is activated.\nWhether gasleft extern function is activated.\nMemory stipend. Amount of free memory (in 64kb pages) each …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if running in static context.\nCheck if running in static context or reentrancy context\nGas price for <code>JUMPDEST</code> opcode\nVM execution does not increase null signed address nonce …\nKill basic accounts below this balance if touched.\nKill empty accounts if touched.\nThe last block hash.\nCreates log entry with given topics and data\nAdditional gas for data in <code>LOG*</code>\nGas price for <code>LOG*</code>\nAdditional gas for each topic in <code>LOG*</code>\nMax number of nested calls/creates\nMax stack height (native WebAssembly stack limiter)\nMemory (load/store) operations multiplier.\nMemory copy cost, per byte\nGas for used memory\nDiv operations multiplier.\nCreate <code>ReturnData</code> from give buffer and slice.\nDon’t ever make empty accounts; contracts start with …\nThe block number.\nCost of wasm opcode is calculated as TABLE_ENTRY_COST * …\nCost of wasm opcode is calculated as TABLE_ENTRY_COST * …\nBalance of the origin account.\nThis is the address of original sender of the transaction.\nParam types encoding\nPoS view number.\nCoefficient used to convert memory size to gas price for …\nDefault opcode cost\nResume an execution for call, returns back the Vm …\nResume an execution from create, returns back the Vm …\nShould be called when transaction calls <code>RETURN</code> opcode. …\nPrice for retiring PoS node.\nSender of current part of the transaction.\nSeparate out database-related errors from other EVM errors.\nStores a value for given key.\nGas price for <code>SHA3</code> opcode\nAdditional gas for <code>SHA3</code> opcode for each word of hashed …\nGas price for loading from storage\nReturns the space of the blockchain\nSpace\nReturns specification.\nGas refund for <code>SSTORE</code> clearing (when <code>storage!=0</code>, <code>new==0</code>)\nGas price for altering value in storage\nGas price for setting new value to storage (<code>storage==0</code>, …\nVM stack limit\nGeneral static query of Address value from env-info\nGeneral static query of U256 value from env-info\nReturns a value for given key.\nThis is the address of account who will pay collateral for …\nIf Some(x): let limit = GAS * (x - 1) / x; let CALL’s …\nShould be called when contract commits suicide. Address to …\nPrice of SUICIDE\nRefund for SUICIDE\nAmount of additional gas to pay when SUICIDE credits a …\nGas prices for instructions in all tiers\nThe block timestamp.\nGas price for <code>TLOAD</code>\nThe transaction_epoch_bound used to verify if a …\nReturns the transfer action value of the U256-convertable …\nStores a value for given key.\nReturns a value for given key.\nGas price for <code>TSTORE</code>\n<code>CREATE</code> transaction cost\nAditional cost for non-empty data transaction\nAdditional cost for empty data transaction\nTransaction cost\nReturns action value as U256.\nTransaction value.\nReturns wasm spec\nWasm extra specs, if wasm activated\nPosition the code tried to jump to.\nUnrecognized opcode\nInvoked instruction\nInvoked instruction\nWhat was the stack limit\nWhat was the stack limit\nHow many elements were on stack\nHow many elements were on stack\nHow many stack elements was requested by instruction\nHow many stack elements instruction wanted to push\nHow many stack elements was requested by instruction\nHow many stack elements instruction wanted to pop\nApply or revert state changes on revert.\nReturn data buffer.\nAmount of gas left.\nApply or revert state changes.\nGas left.\nReturn data offset.\nReturn data size.")