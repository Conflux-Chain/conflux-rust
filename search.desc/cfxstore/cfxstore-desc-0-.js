searchState.loadedDescShard("cfxstore", 0, "Ethereum key-management.\nSimilar to <code>CfxStore</code> but may store many accounts (with …\nAccounts store.\nAccount creation failed.\nEncrypted data\nCustom error\nDerivation scheme for keys\nDerivation error\nAccount-related errors.\n<code>EthCrypto</code> error\n<code>EthKey</code> error\n<code>cfxkey::crypto::Error</code>\nHash derivation, hard.\nHierarchical derivation\nNode in hierarchical derivation.\nInvalid Account.\nInvalid Vault Crypto meta.\nInvalid Key File\nInvalid Message.\nInvalid Password\nAccount’s secret is invalid.\nInvalid vault name\nIO error\nPublic opaque type representing serializable <code>KeyFile</code>.\nAn opaque wrapper for secret.\nPre-sale wallet.\nReference to key in root directory\nAccount representation.\nSecret Store API\nKey directory reference\nSimple Secret Store API\nHash derivation, soft.\nStored account reference\nUnsupported vault\nReferenc to key in specific vault\nVault not found\nVaults are not supported.\nGet reference to some account with given address. This …\nReturns all accounts in this secret store.\nAccounts Directory\nAccount address\nAccount address\nAgree on shared key.\nAgree on shared key.\ncfxkey reexport to make documentation look pretty.\nCnage account’ vault\nChanges accounts password.\nChange account’s password.\nChange vault password\nCheck if password matches the account.\nEncryption parameters\nEncrypted data buffer\nClose vault\nCopies account between stores and vaults.\nCreate a new account\nCreate new vault with given password\nAccount private key derivation definition.\nDecrypt a messages with given account.\nDecrypt the wallet.\nTry to decrypt and return result as is\nDecrypt a message.\nExports key details for account.\nAccount filename\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>SafeAccount</code> from the given <code>json</code>; if it was …\nCreate a new <code>SafeAccount</code> from the given vault <code>json</code>; if it …\nGenerates new derived account.\nGet vault metadata string.\nAccount ID\nImport an account from a file.\nImport all accounts from one directory to the other.\nImports geth accounts to the store/vault.\nImports existing JSON wallet\nIndex sequence of the node.\nInserts new accounts to the store (or vault) with given …\nInserts new derived account to the store (or vault) with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VaultKeyFile</code> from the given <code>self</code>\nKey derivation function parameters\nLists all found geth accounts.\nList all currently opened vaults\nList all vaults\nReturns local path of the store.\nMessage authentication code\nReturns account’s metadata.\nAccount metadata\nReturns account’s name.\nAccount name\nCreate new account reference\nOpen a new accounts store with given key directory backend.\nOpen new multi-accounts store with given key directory …\nOpen a pre-sale wallet.\nOpen vault with given password\nOpen a new account store with given key directory backend …\nOpen new multi-accounts store with given key directory …\nReturns a public key for given account.\nDerive public key.\nGenerate a string which is a random phrase of a number of …\nGenerate a random string of given length.\nReturns a raw opaque Secret that can be later used to sign …\nProvide a <code>HashSet</code> of all accounts available for import …\nEntirely removes account from the store and underlying …\nCreate reference to root account with given address\nTry to decrypt and convert result to account secret\nModifies account name.\nModifies account metadata.\nModify account refresh timeout - how often they are …\nModify account refresh timeout - how often they are …\nSet vault metadata string.\nSign a message with given account.\nSign a message.\nSign a message with derived account.\nSigns a message with raw secret.\nSigns a message with raw secret.\nNode is soft (allows proof of parent from parent node).\nChecks if password matches given account.\nReturns uuid of an account.\nCreate reference to vault account with given address\nVault reference\nAccount version\nEncrypt custom plain data\nEncrypt account secret\nKeys file manager for root keys directory\nError is fatal and directory is probably in inconsistent …\nKeys directory\nDisk directory key file manager\nAccounts in-memory storage.\nError is non fatal, directory is consistent with new key\nError is non fatal, directory is reverted to pre-operation …\nRoot keys directory implementation\n<code>VaultKeyDirectory::set_key</code> error\nVault directory implementation\nVault key\nVault directory\nVaults provider\nCast to <code>KeyDirectory</code>\nReturn vault provider, if available\nOpen existing vault directory with given key\nCreate new vault with given key\nCreate new vault directory with given key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert new key to directory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of iterations to produce a derived key from password\nGet vault key\nList all vaults\nRead keys from directory\nGet vault meta\nRead vault meta without actually opening the vault\nVault name\nCreate new vault key\nOpen existing vault with given key\nVault password\nGet directory filesystem path, if available\nRead <code>SafeAccount</code> from given key file stream\nRemove key from directory\nSet new key for vault\nSet vault meta\nUnique representation of directory account collection\nUpdate key in the directory\nGet vault meta\nallows to read keyfiles with given password (needed for …\nWrite <code>SafeAccount</code> to given key file stream\nSimple brainwallet.\nTries to find brain-seed keypair with address starting …\nCustom\nKey derivation over generic label <code>T</code>\nCrypto error\nExtended public key, allows deterministic derivation of …\nExtended secret key, allows deterministic derivation of …\nGenerates new keypair.\nHard key derivation (does not allow proof of parent)\nInvalid address\nInvalid AES message\nInvalid public key\nInvalid secret key\nInvalid EC signature\nInvalid y-parity\nIO Error\nsecp256k1 key pair\nGenerates new keypair.\nPhrase is shorter than it was expected.\nTries to find keypair with address starting with given …\nRandomly generates new keypair, instantiating the RNG each …\nSignature encoded as RSV components\nSoft key derivation (allow proof of parent)\nUninstantiatable error type for infallible generators.\nPhrase contains a word that doesn’t come from our …\nPhrase Validation Error\nInplace add one secret key to another (scalar + scalar)\nPrivate key component of the extended key.\nChecks validity of this key.\nInplace decrease secret key (scalar - 1)\nDerive new private key\nDerive new public key Operation is defined only for index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse bytes as a signature encoded as RSV (V in “Electrum…\nCreate a signature object from the sig.\nCreate new extended public key from known secret\nCreate a pair from secret key\nCreates a <code>Secret</code> from the given slice, returning <code>None</code> if …\nImports and validates the key.\nShould be called to generate new keypair.\nShould be called to generate new keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode the signature into RSV array (V altered to be in “…\nInplace inverse secret key (1 / scalar)\nCheck if the recovered address started with 0x1. If it …\nCheck if this is a “low” signature.\nCheck if each component of the signature is in range.\nInplace multiply one secret key to another (scalar * …\nInplace negate secret key (-scalar)\nNew extended key from given secret. Chain code will be …\nNew extended public key from known parent and chain code\nNew extended key from given secret with the random chain …\nCompute power of secret key inplace (secret ^ pow). This …\nWhether the public key is valid.\nGet a slice into the ‘r’ portion of the data.\nGet a slice into the ‘s’ portion of the data.\nInplace subtract one secret key from another (scalar - …\nCreate <code>secp256k1::key::SecretKey</code> based on this secret\nGet the recovery byte.\nNew extended key from given secret and chain code.\nCreates zero key, which is invalid for crypto operations, …\nIterator over possible\nTries to find a phrase for address, given the number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nECDH functions\nECIES function\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAgree on a shared secret\nDecrypt a message with a secret key, checking HMAC for …\nEncrypt a message with a public key, writing an HMAC …\nReturn secp256k1 elliptic curve order\nReturn base point of secp256k1\nInplace add one public key to another (EC point + EC point)\nWhether the public key is valid.\nInplace multiply public key by secret key (EC point * …\nReplace public key with its negation (EC point = - EC …\nInplace sub one public key from another (EC point - EC …")