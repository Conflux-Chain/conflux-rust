searchState.loadedDescShard("diem_secure_storage", 0, "Represents actions\nCryptoKVStorage offers a CryptoStorage implementation by …\nCryptoStorage provides an abstraction for secure …\nA container for a get response that contains relevant …\nGitHubStorage leverages a GitHub repository to provide a …\nId represents a Diem internal identifier for a given …\nInMemoryStorage represents a key value store that is …\nA secure key/value storage engine. Create takes a policy …\nThis provides a light wrapper around KV storages to …\nOnDiskStorage represents a key value store that is …\nMaps an identity to a set of capabilities\nDictates a set of permissions\nThis is the Diem interface into secure storage. Any …\nVaultStorage utilizes Vault for maintaining encrypted, …\nReturns an error if the backend service is not online and …\nReturns an error if the backend service is not online and …\nSecurely generates a new named Consensus private key. The …\nSecurely generates a new named Consensus private key. The …\nCreates a token but uses the namespace for policies\nReturns the Consensus private key stored at ‘name’.\nReturns the Consensus private key stored at ‘name’.\nReturns the Consensus private key stored at ‘name’ and …\nReturns the Consensus private key stored at ‘name’ and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a value from storage and fails if the backend is …\nRetrieves a value from storage and fails if the backend is …\nReturns the Consensus public key stored at ‘name’.\nReturns the Consensus public key stored at ‘name’.\nReturns the previous version of the Consensus public key …\nReturns the previous version of the Consensus public key …\nAn optional API that allows importing private keys and …\nAn optional API that allows importing private keys and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime since Unix Epoch in seconds.\nTime since Unix Epoch in seconds.\nCreates a GetResponse\nConsensusPublicKey stored at the provided key\nRotates an Consensus private key. Future calls without …\nRotates an Consensus private key. Future calls without …\nSets a value in storage and fails if the backend is …\nSets a value in storage and fails if the backend is …\nCreate a new policy in Vault, see the explanation for …\nSigns the provided securely-hashable struct, using the ‘…\nSigns the provided securely-hashable struct, using the ‘…\nSigns the provided securely-hashable struct, using the ‘…\nSigns the provided securely-hashable struct, using the ‘…\nValue stored at the provided key")