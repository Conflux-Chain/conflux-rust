searchState.loadedDescShard("diem_logger", 0, "This crates provides an API for logging in diem.\nDefault size of log write channel, if the channel is full, …\nConsensus received an equivocating vote\nConsensus received an invalid message (not well-formed, …\nThe “debug” level.\nA builder for a <code>DiemLogger</code>, configures what, where, and …\nThe “error” level.\nAn individual structured logging event from a log line.  …\nA logging filter to determine which logs to keep or remove …\nThe “info” level.\nA block being committed or executed is invalid\nConsensus received an invalid proposal\nConsensus received an invalid new round message\nHealthChecker received an invalid message\nNetwork received an invalid message from a remote peer\nHealthChecker received an invalid network event\nMempool received an invalid network event\nA received block is invalid\nConsensus received an invalid sync info message\nMempool received a transaction from another peer with an …\nThe key part of a logging key value pair e.g. …\nThe logging key value pair e.g. <code>info!(key = value)</code>\nLogging levels, used for stratifying logs, and disabling …\nA definition of the most verbose <code>Level</code> allowed, or …\nAssociated metadata with every log to identify what kind …\nA failed noise handshake that’s either a clear bug or …\nA schema of key-value pairs.\nInvalid chunk of transactions received\nThe “trace” level.\nThe value part of a logging key value pair e.g. …\nA visitor for the key-value pairs in a <code>Schema</code>.\nThe “warn” level.\nAn trait encapsulating the operations required for writing …\nLog at the <code>debug</code> level\nLog at the <code>error</code> level\nWrites event to event stream Example: event!(“committed…\nFlush the global <code>Logger</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from a debuggable type.\nGet a value from a displayable type.\nGet a value from a debuggable type.\nLog at the <code>info</code> level\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog at the given level, it’s recommended to use a …\nReturns the most verbose logging level filter.\nPeriodic sampling for logs, metrics, and other use cases …\nSamples a given function at a <code>SampleRate</code>, useful for …\nLog at the <code>trace</code> level\nVisit key-value pairs.\nVisit a key-value pair.\nLog at the <code>warn</code> level\nWrite the log.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet up to MAX_EVENTS_IN_QUEUE last events and clears the …\nSends event to event stream.\nConsensus received an equivocating vote\nConsensus received an invalid message (not well-formed, …\nA struct for writing logs to a file\nA block being committed or executed is invalid\nConsensus received an invalid proposal\nConsensus received an invalid new round message\nHealthChecker received an invalid message\nNetwork received an invalid message from a remote peer\nHealthChecker received an invalid network event\nMempool received an invalid network event\nA received block is invalid\nConsensus received an invalid sync info message\nMempool received a transaction from another peer with an …\nA failed noise handshake that’s either a clear bug or …\nInvalid chunk of transactions received\nLog at the <code>debug</code> level\nLog at the <code>error</code> level\nLog at the <code>info</code> level\nSamples a given function at a <code>SampleRate</code>, useful for …\nLog at the <code>trace</code> level\nLog at the <code>warn</code> level\nWrites event to event stream Example: event!(“committed…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite to file\nAlways Sample\nOnly sample a single time during a window of time. This …\nSample based on the frequency of the event. The provided …\nThe rate at which a <code>sample!</code> macro will run it’s given …\nAn internal struct that can be checked if a sample is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")