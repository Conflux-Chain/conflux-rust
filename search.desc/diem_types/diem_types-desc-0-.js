searchState.loadedDescShard("diem_types", 0, "The number of bytes in an address.\nA struct that represents an account address.\nHex address: 0x0\nSuppose we have the following data structure in a smart …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to convert the provided byte array into Address.\nTries to convert the provided byte buffer into Address.\nFor each transaction the VM executes, the VM will output a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract the structured resource or module <code>Path</code> from <code>self</code>\nExtract a StructTag from <code>self</code>. Returns Some if this is a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert Accesses into a byte offset which would be used by …\nA struct that represents an account address.\nThe ModuleId for the Account module.\nThe Identifier for the Account module.\nThe name of the Account module.\nReturn <code>Some(struct_name)</code> if <code>t</code> is a <code>StructTag</code> representing …\nIn addition to the constraints for valid Move identifiers, …\nA Rust representation of an Account resource. This is not …\nReturn the authentication_key field for the given …\nReturns the argument unchanged.\nReturns if this account has delegated its key rotation …\nReturns if this account has delegated its withdrawal …\nCalls <code>U::from(self)</code>.\nConstructs an Account resource.\nReturn the received_events handle for the given …\nReturn the sent_events handle for the given AccountResource\nReturn the sequence_number field for the given …\nThe balance resource held under an account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct that represents a CurrencyInfo resource\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the received_mint_events handle for the given …\nDefines the dual attest limit in microDiem XDX\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe preburn balance held under an account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe preburn balance held under an account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe preburn along with metadata held in a preburn queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA enum that captures the collection of role-specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturn an iterator over the module values stored under …\nCalls <code>U::from(self)</code>.\nCryptographic hasher for an BCS-serializable #item\nBlob value representing the account state. If this field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nThe proof the client can use to authenticate the value.\nVerifies the account state blob with the proof, both …\nThe transaction version at which this account state is …\nThis structure contains all the information needed for …\nCryptographic hasher for an BCS-serializable #item\nThe round of a block is a consensus-internal counter, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new genesis block. The genesis block is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe epoch after this block committed\nStruct that will be persisted on chain to store the …\nThe path to the new block event handle under a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsers might accidentally initialize the ChainId field to …\nA registry of named chain IDs Its main purpose is to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSupport versioning of the data structure.\nCryptographic hasher for an BCS-serializable #item\nEntry produced via a call to the <code>emit_event</code> builtin.\nCryptographic hasher for an BCS-serializable #item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nVerifies the event with the proof, both carried by <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA vector of LedgerInfo with contiguous increasing epoch …\nThe verification of the epoch change proof starts with …\nThe first/lowest epoch of the proof to indicate which …\nReturns true in case the given epoch is larger than the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the given <code>LedgerInfo</code> is stale and probably …\nVerify if the ledger_info is trust worthy.\nVerify the proof is correctly chained with known epoch and …\nEpochState represents a trusted validator set to validate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Rust representation of an Event Handle Resource.\nA struct that represents a globally unique id for an Event …\nThe number of bytes in an EventKey.\nGet the byte representation of the event key.\nReturn the counter for the handle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf this is the <code>ith</code> EventKey<code>created by</code>get_creator_address()…\nGet the account address part in this event key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the key to where this event is stored in EventStore.\nConstruct a new EventKey from a byte array slice.\nConstructs a new Event Handle\nCreate a unique handle by using an AccountAddress and a …\nConvert event key into a byte array.\nTries to convert the provided byte array into Event Key.\nThis structure serves a dual purpose.\nCryptographic hasher for an BCS-serializable #item\nWrapper around LedgerInfoWithScheme to support future …\nThe validator node returns this structure which includes …\nThe <code>BlockInfo</code> of a committed block.\nReturns hash of consensus voting data in this <code>LedgerInfo</code>.\nA series of wrapper functions for the data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new LedgerInfo at genesis with the given genesis …\nCreate a new <code>LedgerInfoWithConsensus</code> at genesis with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>LedgerInfo</code> object based on the given commit …\nThe validator is identified by its account address: in …\nA <code>MempoolStatus</code> is represented as a required status code …\ninsertion status code\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noptional message\nAdds a message to the Mempool status.\nReturns a vector of Move resources as serialized byte array\nReturns a vector of Move resources as serialized byte …\nGet the version on the latest transaction info.\nA minimally parsed DNS name. We don’t really do any …\nOverview\nPossible errors when parsing a human-readable …\nA single protocol in the <code>NetworkAddress</code> protocol stack.\nGiven a base <code>NetworkAddress</code>, append production protocols …\nSee <code>EncNetworkAddress::encrypt</code>.\nRetrieves the IP address from the network address\nA temporary, hacky function to parse out the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck that a <code>NetworkAddress</code> looks like a typical DiemNet …\nparse the <code>&amp;[Protocol]</code> into the <code>&quot;/dns/&lt;domain&gt;/tcp/&lt;port&gt;&quot;</code>, …\nparse the <code>&amp;[Protocol]</code> into the <code>&quot;/ln-handshake/&lt;version&gt;&quot;</code> …\nparse the <code>&amp;[Protocol]</code> into the <code>&quot;/ip4/&lt;addr&gt;/tcp/&lt;port&gt;&quot;</code> or …\nparse the <code>&amp;[Protocol]</code> into the <code>&quot;/memory/&lt;port&gt;&quot;</code> prefix and …\nparse the <code>&amp;[Protocol]</code> into the <code>&quot;/ln-noise-ik/&lt;pubkey&gt;&quot;</code> …\nA function to rotate public keys for <code>NoiseIK</code> protocols\nThe length in bytes of the AES-256-GCM nonce.\nThe length in bytes of the AES-256-GCM authentication tag.\nAn encrypted <code>NetworkAddress</code>.\nWe salt the HKDF for deriving the account keys to provide …\nThe length in bytes of the <code>shared_val_netaddr_key</code> and …\nConvenient type alias for the <code>shared_val_netaddr_key</code> as an …\nConstant key + version so we can push <code>EncNetworkAddress</code> …\nPanics\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTo register an on-chain config in Rust:\nTrait to be implemented by a storage type from which to …\nDefines the version of Diem Validator software.\nState sync will panic if the value of any config in this …\nTrait to be implemented by a Rust struct representation of …\nDefines all the on chain configuration data needed by VM.\nDefines and holds the publishing policies for the VM. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a ValidatorSet resource.\nCryptographic hasher for an BCS-serializable #item\nThis module implements an in-memory Merkle Accumulator …\nThis module has definition of various proofs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module provides an abstraction for positioning a node …\nThe Accumulator implementation.\nAppends a list of new leaves to an existing accumulator. …\nAppends a list of new subtrees to the existing …\nReturns the argument unchanged.\nConstructs a new accumulator with given leaves.\nReturns the set of frozen subtree roots in this accumulator\nCalls <code>U::from(self)</code>.\nConstructs a new accumulator with roots of existing frozen …\nReturns the total number of leaves in this accumulator.\nReturns the root hash of the accumulator.\nThe complete proof used to authenticate the state of an …\nA proof that can be used to show that two Merkle …\nA proof that first verifies that establishes correct …\nA proof that can be used authenticate an element in an …\nA proof that is similar to <code>AccumulatorProof</code>, but can be …\nThe complete proof used to authenticate a contract event. …\nBecause leaves can only take half the space in the tree, …\nA proof that can be used to authenticate an element in a …\nA proof that can be used authenticate a range of …\n<code>TransactionInfo</code> and a <code>TransactionAccumulatorProof</code> …\nThe complete proof used to authenticate a list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the leaf node in this proof.\nReturns the <code>ledger_info_to_transaction_info_proof</code> object …\nGet all the left siblngs.\nConstructs a new <code>AccumulatorProof</code> using a list of siblings.\nConstructs a new <code>SparseMerkleProof</code> using leaf and a list …\nConstructs a new <code>AccumulatorConsistencyProof</code> using given …\nConstructs a new <code>AccumulatorRangeProof</code> using <code>left_siblings</code> …\nConstructs a new <code>SparseMerkleRangeProof</code>.\nConstructs a new <code>TransactionWithProof</code> object using given …\nConstructs a new <code>AccountStateProof</code> using given …\nConstructs a new <code>EventProof</code> using given …\nConstructs a new <code>TransactionListProof</code> using …\nConstructs a new <code>AccumulatorRangeProof</code> for an empty list …\nConstructs a proof for an empty list of transactions.\nGet all the right siblngs.\nReturns the siblings.\nReturns the list of siblings in this proof.\nReturns the list of siblings in this proof.\nReturns the subtrees.\nReturns the <code>transaction_info</code> object in this proof.\nReturns the <code>transaction_info_to_account_proof</code> object in …\nReturns the <code>transaction_info_with_proof</code> object in this …\nReturns the <code>transaction_info_with_proof</code> object in this …\nReturns the list of <code>TransactionInfo</code> objects.\nVerifies an element whose hash is <code>element_hash</code> and version …\nIf <code>element_value</code> is present, verifies an element whose key …\nVerifies the proof is correct. The verifier needs to have …\nVerifies that the <code>TransactionInfo</code> exists in the ledger …\nVerifies that the state of an account at version …\nVerifies that a given event is correct using provided …\nVerifies the list of transactions are correct using the …\n<code>AncestorIterator</code> generates current position and moves …\n<code>AncestorSiblingIterator</code> generates current sibling position …\nTraverse leaves from left to right in groups that forms …\nGiven an accumulator of size <code>current_num_leaves</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\npos count start from 0 on each level\nGiven <code>node</code>, an index in an in-order traversal of a perfect …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this position is a left child of its parent.  The …\nCreates an <code>AncestorIterator</code> using this position.\nCreates an <code>AncestorSiblingIterator</code> using this position.\nWhat is the left node of this node? Will overflow if the …\nGiven a node, find its left most child in its subtree Left …\nWhat level is this node in the tree, 0 if the node is a …\nConstructs a new <code>FrozenSubtreeSiblingIterator</code> given the …\nWhat is the parent of this node?\nWhat is the right node of this node? Will overflow if the …\nGiven a node, find its right most child in its subtree. …\nThis method calculates the index of the smallest root …\nThis method takes in a node position and return its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA node becomes its voting power number of ElectionNodes …\nComputed based on other fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn <code>(validator_set, term_seed)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a new node to term list after a valid Election …\nTODO(lpl): Return VDF seed for the term. Return …\n<code>get_new_committee</code> has been called before this to produce an\nThe node id to unlock.\nThe node id to dispute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe description of a (regular) argument in a script.\nTransaction to update the block metadata resource at the …\nDirectly passing in the WriteSet.\nDiscard the transaction output\nA transaction that add a node to committee candidates.\nTransaction that applies a WriteSet to the current …\nKeep the transaction output\nA transaction that publishes code.\nRawTransaction is the portion of a transaction that a …\nCryptographic hasher for an BCS-serializable #item\nA transaction that sets a node to <code>Retire</code> status so the …\nRetry the transaction, e.g., after a reconfiguration\nCall a Move script.\nA transaction that executes code.\nGenerate the WriteSet by running a script.\nHow to call a particular Move script (aka. an “ABI”).\nCall a Move script function.\nA transaction that executes an existing script function …\nA transaction for which the signature has been verified. …\nA transaction that has been signed.\n<code>Transaction</code> will be the transaction type used internally …\nCryptographic hasher for an BCS-serializable #item\n<code>TransactionInfo</code> is the object we store in the transaction …\nCryptographic hasher for an BCS-serializable #item\nThe list may have three states:\nThe output of executing a transaction.\nDifferent kinds of transactions.\nThe status of executing a transaction. The VM decides …\nThe description of a type argument in a script.\nTransaction submitted by the user. e.g: P2P payment …\nThe result of running the transaction through the VM …\nA system maintenance transaction.\nTwo different kinds of WriteSet transactions.\nChecks that the signature of given transaction. Returns …\nReturns the root hash of Merkle Accumulator storing all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the amount of gas used by this transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>SignedTransaction</code> within.\nReturns the <code>RawTransaction</code> within.\nThis file implements Diem transaction metadata types to …\nCreate a new <code>RawTransaction</code> with a payload.\nConstructs a new <code>TransactionInfo</code> object using transaction …\nConstructor.\nCreates an empty transaction list.\nCreate a new <code>RawTransaction</code> with a module to publish.\nCreate a new <code>RawTransaction</code> with a script.\nCreate a new <code>RawTransaction</code> with a script function.\nThe higher the number that is returned, the greater …\nReturn the sender of this transaction.\nSigns the given <code>RawTransaction</code>. Note that this consumes the\nReturns root hash of Sparse Merkle Tree describing the …\nReturns the hash of this transaction.\nVerifies the transaction list with the proofs, both …\nVerifies the transaction with the proof, both carried by …\nExecute the script as the designated signer.\nScript body that gets executed.\nA struct that represents an account authentication key. An …\nCryptographic hasher for an BCS-serializable #item\nA value that can be hashed to produce an authentication key\nBLS signature\nSingle signature\nThe number of bytes in an authentication key.\nK-of-N multisignature\nA <code>TransactionAuthenticator</code> is an abstraction of a …\nReturn an authentication key derived from <code>self</code>’s public …\nReturn an authentication key preimage derived from <code>self</code>’…\nReturn an address derived from the last …\nConstruct a preimage from an Ed25519 public key\nCreate a single-signature ed25519 authenticator\nCreate an authentication key from an Ed25519 public key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an authentication key from a preimage by taking its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a vector from this authentication key\nConstruct a preimage from a MultiEd25519 public key\nCreate a multisignature ed25519 authenticator\nCreate an authentication key from a MultiEd25519 public key\nCreate an authentication key from <code>bytes</code>\nReturn the first AccountAddress::LENGTH bytes of this …\nReturn the raw bytes of <code>self.public_key</code>\nCreate a random authentication key. For testing only\nUnique identifier for the signature scheme\nReturn the raw bytes of <code>self.signature</code>\nConstruct a vector from this authentication key\nReturn Ok if the authenticator’s public key matches its …\nCraft a transaction request.\nList of supported transaction metadata format versions for …\nTransaction metadata format for coin trades …\nList of supported transaction metadata format versions for …\nTransaction metadata for regular addressing with optional …\nList of all supported metadata types\nList of supported transaction metadata format versions for …\nTransaction metadata format for transactions subject to …\nList of supported transaction metadata format versions for …\nTransaction metadata format for transactions subject to …\nOpaque binary transaction metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe reason of the refund\nA list of trade_ids this transaction wants to settle\nTransaction version that is refunded\nWe have a newer <code>TrustedState</code> and there was at least one …\nThe latest ledger info is at the same version as the …\n<code>TrustedState</code> keeps track of our latest trusted state, …\n<code>TrustedStateChange</code> is the result of attempting to ratchet …\nWe have a newer <code>TrustedState</code> but it’s still in the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify and ratchet forward our trusted state using a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is an bcs serialized <code>Vec&lt;NetworkAddress&gt;</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is an bcs serialized <code>Vec&lt;EncNetworkAddress&gt;</code>\nNone if the leader election does not need VRF.\nAfter executing a special transaction indicates a change …\nReturns the id of this validator (hash of the current …\nReturns the validator’s config\nReturns the key for validating signed messages from this …\nReturns the voting power for this validator\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the validator’s config, consuming self\nValidatorSigner associates an author with public and …\nReturns the author associated with this signer.\nReturns the argument unchanged.\nFor test only - makes signer with nicely looking account …\nCalls <code>U::from(self)</code>.\nReturns the public key associated with this signer.\nGenerate a random set of public and private keys and author\nConstructs a signature for <code>message</code> using <code>private_key</code>.\nThe signature does not match the hash.\nThe author for this signature is unknown by this validator.\nHelper struct to manage validator information for …\nSupports validation of signatures for known authors with …\nErrors possible during signature verification.\nThis function will try batch signature verification and …\nEnsure there is at least quorum_voting_power in the …\nReturn the extra vote compared to <code>quorum_voting_power</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an ordered list of account addresses as an <code>Iterator</code>…\nReturns the public key for this address.\nReturns the voting power for this address.\nReturns the VRF public key for this address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs there at least one author?\nReturns the number of authors to be validated.\nInitialize with a map of account address to validator info …\nHelper method to initialize with a single author and …\nReturns quorum voting power.\nVerify the correctness of a signature of a message by a …\nThis function will successfully return when at least …\nVerify the correctness of a signature of a message by a …\nAn <code>AbortLocation</code> specifies where a Move program <code>abort</code> …\nIndicates an error from the VM, e.g. OUT_OF_GAS, …\nThe VM status corresponding to an EXECUTED status code\nIndicates an failure from inside Move code, where the VM …\nIndicates <code>abort</code> occurred in the specified module\nIndicates an <code>abort</code> from inside Move code. Contains the …\nIndicates the <code>abort</code> occurred in a script\nWe don’t derive Arbitrary on this enum because it is too …\nA status type is one of 5 different variants, along with a …\nA <code>VMStatus</code> is represented as either\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Ok</code> with a recorded status if it should be kept, <code>Err</code>…\nReturns the Move abort code if the status is <code>MoveAbort</code>, …\nReturn the status code for the <code>VMStatus</code>\nReturn the status type for this <code>VMStatus</code>. This is solely …\nReturn the status type for this status code\nThe ModuleId for the Account module.\nThe Identifier for the Account module.\nThe name of the Account module.\nThe ModuleId for the Designated Dealer module.\nThe Identifier for the Designated Dealer module.\nThe name of the Designated Dealer module.\nThe ModuleId for the Diem module.\nThe Identifier for the Diem module.\nThe name of the Diem module.\nLocation for an abort in the Account module\nCryptographic hasher for an BCS-serializable #item\nWaypoint keeps information about the LedgerInfo on a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new waypoint given any LedgerInfo.\nGenerates a new waypoint given the epoch change LedgerInfo.\nErrors in case the given ledger info does not match the …\n<code>WriteSet</code> contains all access paths that one transaction …\nA mutable version of <code>WriteSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")