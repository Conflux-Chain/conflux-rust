searchState.loadedDescShard("cfx_tasks", 0, "Error with the name of the task that panicked and an error …\nA type that can spawn new tokio tasks\nMany reth components require to spawn tasks for …\n<code>TaskSpawner</code> with extended behaviour\nAn <code>TaskSpawner</code> that uses <code>tokio::task::spawn</code> to execute …\nConverts the instance to a boxed <code>TaskSpawner</code>.\nReturns a <code>TaskManager</code> over the currently running Runtime.\nReturns a new <code>TaskExecutor</code> that can spawn new tasks onto …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFires the shutdown signal and awaits until all tasks are …\nFires the shutdown signal and awaits until all tasks are …\nReturns the Handle to the tokio runtime.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance connected to the given handle’s …\nReturns the receiver of the shutdown signal.\nHelper for shutdown signals\nSpawns the task onto the runtime. See also <code>Handle::spawn</code>.\nSpawns the task onto the runtime. The given future …\nSpawns a blocking task onto the runtime.\nSpawns a blocking task onto the runtime. The given future …\nThis spawns a critical task onto the runtime.\nThis spawns a critical task onto the runtime. The given …\nThis spawns a critical blocking task onto the runtime.\nThis spawns a critical blocking task onto the runtime. The …\nThis spawns a critical task onto the runtime.\nThis spawns a critical task onto the runtime.\nThis spawns a critical task onto the runtime.\nThis spawns a regular task onto the runtime.\nThis spawns a regular task onto the runtime.\nSpawns the task onto the runtime. The given future …\nA Future that resolves when the shutdown event has been …\nA guard that fires once dropped to signal the <code>TaskManager</code> …\nA Future that resolves when the shutdown event has been …\nShutdown signal that fires either manually or on drop by …\nFire the signal manually.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new shutdown future that is ignores the returned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a channel pair that’s used to propagate shutdown …")