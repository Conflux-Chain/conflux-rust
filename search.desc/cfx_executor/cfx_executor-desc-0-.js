searchState.loadedDescShard("cfx_executor", 0, "Conflux Executor: A Rust crate for the core logic of …\nExecution Context: Implements the context during the …\nTransaction Execution Entry: Manages the execution of …\nConflux Internal Contracts: Implements Conflux’s builtin …\nExecution Engine Object: Serves as a factory for …\nA marco to construct the functions table for an internal …\nA marco to implement an internal contract.\nMake a solidity interface function, it requires three …\nObservability Interface: Defines a trait for extending …\nSpecification Control: Enables fine-grained control over …\nStack Management for Execution Engine: Conflux’s …\nLedger State: Acts as a caching and checkpoint layer built …\nTransaction Execution Tracker: Tracks and records …\nTransaction properties that externalities need to know …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPopulates origin info from action params.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction executor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransaction base gas: 21000 (for tx) or 53000 (for …\nFee burnt by CIP-1559\nAddresses of contracts created during execution of …\nExtension output of executed\nFee that need to be paid by execution of this transaction.\nReturns the argument unchanged.\nGas charged during execution of transaction.\nIf the gas fee is born by designated sponsor.\nGas used during execution of transaction.\nCalls <code>U::from(self)</code>.\nVector of logs generated by transaction.\nTransaction output.\nAny accounts that occupy some storage.\nAny accounts that release some storage.\nIf the storage cost is born by designated sponsor.\nEpoch height out of bound. The transaction was correct in …\nReturned when transaction nonce does not match state nonce.\nThe recipient of current tx is in invalid address field. …\nReturned when cost of transaction (value + gas_price * …\nReturned when cost of transaction (value + gas_price * …\nNot enough gas limit for large transacton, only for …\nThe account nonce in world-state is larger than tx nonce\nReturned when a non-sponsored transaction’s sender does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActual gas cost. This should be min(gas_fee, balance).\nActual balance.\nMaximum storage limit cost.\nMinimum required balance.\nNonce expected.\nActual balance of gas sponsor.\nNonce found.\nMinimum required gas cost.\nMinimum required storage collateral cost.\nActual balance of storage sponsor.\nTransaction execution options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNative implementation of an internal contract.\nThe internal contracts need to access the context …\nNative implementation of a solidity-interface function.\nAddress of the internal contract\nexecute this internal contract on the given parameters.\nexecute this internal contract on the given parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash-map for solidity function sig and execution handler.\nIf the vote counts are not initialized, all counts will be …\nTime point to run <code>new_contract_with_admin</code> for such a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove the next vote counts into settled and reset the …\nThe Actual Implementation of <code>suicide</code>. The contract which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVirtual machine factory\nBuiltin-contracts for the chain..\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuiltin-contracts for the chain..\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the general parameters of the chain.\nAttach special rules to the creation of spec.\nGet a VM factory that can execute on this state.\nThis trait is used by executive to build traces.\nReturns the argument unchanged.\nCalled before the interpreter is initialized.\nCalled before the interpreter is initialized.\nCalls <code>U::from(self)</code>.\nCalled when a log is emitted.\nCalled when a log is emitted.\nPrepares call trace for given params.\nPrepares call trace for given params.\nPrepares call result trace\nPrepares call result trace\nPrepares create trace for given params.\nPrepares create trace for given params.\nPrepares create result trace\nPrepares create result trace\nCalled when a contract has been self-destructed with funds …\nCalled when a contract has been self-destructed with funds …\nCalled on each step of the interpreter.\nCalled on each step of the interpreter.\nCalled after <code>step</code> when the instruction has been executed.\nCalled after <code>step</code> when the instruction has been executed.\nDiscard the top checkpoint for validity mark\nDiscard the top checkpoint for validity mark\nMark the traces to the top checkpoint as “valid = false…\nMark the traces to the top checkpoint as “valid = false…\nPrepares internal transfer action\nPrepares internal transfer action\nAnticone penalty ratio for reward processing. It should be …\nInitial base rewards according to block height.\nReturn the base reward for a block. <code>past_block_count</code> may …\nCIP-141: Disable Subroutine Opcodes CIP-142: Transient …\nChain id.\nCIP-105: Minimal DAO Vote Count Based on PoS Staking\nCIP-107: DAO-Adjustable Burn of Storage Collateral\nCIP-112: Fix Block Headers <code>custom</code> Field Serde\nCIP-118: Query Unused Storage Points in Internal Contract\nCIP-119: PUSH0 instruction\nCIP-130: Aligning Gas Limit with Transaction Size\nCIP-131: Retain Whitelist on Contract Deletion\nCIP-132: Fix Static Context Check for Internal Contracts\nCIP-133: Enhanced Block Hash Query\nCIP-133: Enhanced Block Hash Query\nCIP-137: Base Fee Sharing in CIP-1559\nCIP-144: Point Evaluation Precompile from EIP-4844\nCIP-145: Fix Receipts upon <code>NotEnoughBalance</code> Error\nCIP-40: Reduce Block Base Reward to 2 CFX\nCIP-43: Introduce Finality Through Staking Vote\nCIP-62: Enable EC-Related Builtin Contracts\nCIP-64: Get Current Epoch Number via Internal Contract\nCIP-71: Disable Anti-Reentrancy\nCIP-76: Remove VM-Related Constraints in Syncing Blocks\nCIP-78: Correct <code>is_sponsored</code> Fields in Receipt\nCIP-86: Update Difficulty Adjustment Algorithm\nCIP-90: Introduce a Fully EVM-Compatible Space\nCIP-90: Introduce a Fully EVM-Compatible Space\nCIP-92: Enable Blake2F Builtin Function\nCIP-94: On-Chain DAO Vote for Chain Parameters\nCIP-94: On-Chain DAO Vote for Chain Parameters\nCIP-97: Clear Staking Lists\nCIP-98: Fix BLOCKHASH Opcode Bug in eSpace\nA security fix without a publicly submitted CIP\nSet the internal contracts to state at the genesis blocks, …\nThe ratio of blocks in the EVM transactions\nThe gas ratio of evm transactions for the block can pack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas limit bound divisor (how much gas limit can change per …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of first block where max code size limit is active. …\nMaximum size of extra data.\nMinimum gas limit.\nNetwork id.\nMain subprotocol name.\nThe upgrades activated at given block height (a.k.a. epoch …\nThe upgrades activated at given block number.\nContains the error value\n<code>Executable</code> is a trait representing an object that can be …\nThe possible outcomes of an <code>Executable</code>’s execution …\n<code>FrameLocal</code> represents the local data associated with a …\nThe result of executing a frame\nThe result of executing a frame on a successful complete …\nA frame has not yet been executed, with all the necessary …\nThe parameters for invoking the next frame and a resumable …\nContains the success value\n<code>Resumable</code> is a trait representing objects for resuming the …\nThe result of the frame’s execution.\nThe global resources and utilities shared across all …\nA helper function which extract substate from <code>FrameResult</code> …\nApply execution state changes or revert them.\nMetadata about the frame call stack.\nThe address of the newly deployed contract, if the current …\nThe address of a newly created contract, if applicable.\nThe depth of the current frame in the call stack.\nA reference to environmental information relevant to the …\nThe function operates in a loop, starting with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinal amount of gas left.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the necessities for executing EVM bytecode.\nCreates a <code>Context</code> for the current frame, which includes …\nThe caller information for the current frame, including …\nReturn data buffer.\nThe space the current frame belongs.\nThe space the current frame belongs.\nActivated hardfork features and the parameters that may be …\nThe ledger state including information such as the balance …\nEnforce the static context of a call, as defined by EIP-214\nCollects changes produced during execution for …\nChanges produced during execution for post-execution …\nA tool for recording information about the execution as it …\nIf we set this key, it means every account has commission …\nMode of dealing with null accounts.\nCreate accounts which would be null.\nDon’t delete null accounts upon touching, but also don’…\nA caching and checkpoint layer built upon semantically …\nMark all touched accounts. TODO: We have not implemented …\nCaller should make sure that staking_balance for this …\nMaintain <code>total_issued_tokens</code>.\nCalculate the secondary reward for the next block number.\nCommit everything to the storage.\nCommit to the statedb and compute state root. Only called …\nDistribute PoS interest to the PoS committee according to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA special implementation to achieve the backward …\nInitialize CIP-107 for the whole system.\nInitialize CIP-137 for the whole system.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKill a contract\nCharge and refund all the storage collaterals. The …\nMaintain <code>total_issued_tokens</code>. This is only used in the …\nA convenience function of <code>write_account_ext_lock</code>\nTracks execution changes for the post-execution process in …\nGet the cleanup mode object from this.\nCreated contracts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAny logs.\nAny accounts that occupy some storage.\nAny accounts that release some storage.\nAny accounts that have suicided.\nAny accounts that are touched.")