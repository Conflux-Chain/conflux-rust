searchState.loadedDescShard("cfxcore_accounts", 0, "Account management.\nCollected account metadata\nAccount management. Responsible for unlocking accounts.\nAccount management settings.\nAccount creation failed.\nCustom error\nDerivation scheme for keys\nDerivation error\nAccount-related errors.\n<code>EthCrypto</code> error\n<code>EthKey</code> error\n<code>cfxkey::crypto::Error</code>\nHash derivation, hard.\nHierarchical derivation\nNode in hierarchical derivation.\nInvalid Account.\nInvalid Vault Crypto meta.\nInvalid Key File\nInvalid Message.\nInvalid Password\nAccount’s secret is invalid.\nInvalid vault name\nIO error\nPublic opaque type representing serializable <code>KeyFile</code>.\nAccount does not exist.\nAccount is not unlocked\nLow-level error from store\nSigning error\nSignature encoded as RSV components\nHash derivation, soft.\nUnsupported vault\nVault not found\nVaults are not supported.\nReturns each account along with name and meta.\nReturns account public key.\nReturns addresses of all accounts.\nReturns each account along with name and meta.\nReturns each address along with metadata.\nAgree on shared key.\nDisallowed accounts.\nChanges the password of <code>account</code> from <code>password</code> to …\nChange vault of the given address.\nChange vault password.\nClose previously opened vault.\nCreate new vault.\nDecrypts a message. If password is not provided the …\nDecrypts a message with given token. Returns a token to …\nReturns the address of default account.\nGenerates new derived account based on the existing one If …\nExports an account for given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse bytes as a signature encoded as RSV (V in “Electrum…\nCreate a signature object from the sig.\nGet vault metadata string.\nChecks whether an account with a given address is present.\nReturns the underlying <code>SecretStore</code> reference if one exists.\nImport a new wallet.\nIndex sequence of the node.\nInserts new account into underlying store. Does not unlock …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode the signature into RSV array (V altered to be in “…\nCheck if this is a “low” signature.\nChecks if given account is unlocked\nChecks if given account is unlocked permanently\nCheck if each component of the signature is in range.\nPermanently removes an account.\nReturns the underlying <code>SecretStore</code> reference if one exists.\nList all currently opened vaults\nList all vaults\nLock an account\nThe rest of the metadata of the account.\nThe name of the account.\nCreates new account provider.\nCreates new random account.\nCreates new random account and returns address and public …\nOpen existing vault.\nGet a slice into the ‘r’ portion of the data.\nRead a hash map of Address -&gt; AccountMeta\nRemoves and address from the address book\nGet a slice into the ‘s’ portion of the data.\nReturns each account along with name and meta.\nReturns each account along with name and meta.\nReturns each address along with metadata.\nReturns each address along with metadata.\nSet vault metadata string.\nSigns the message. If password is not provided the account …\nSigns message using the derived secret. If password is not …\nSigns given message with supplied token. Returns a token …\nNode is soft (allows proof of parent from parent node).\nReturns <code>true</code> if the password for <code>account</code> is <code>password</code>. <code>false</code>…\nCreates not disk backed provider.\nUnlocks account permanently.\nUnlocks account temporarily (for one signing).\nUnlocks account temporarily with a timeout.\nStore raw account secret when unlocking the account …\nThe 128-bit Uuid of the account, if it has one …\nGet the recovery byte.\nWrite a hash map of Address -&gt; AccountMeta")