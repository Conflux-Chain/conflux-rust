searchState.loadedDescShard("treap_map", 0, "Indicates that the search was aborted. This variant is …\nIndicates to abort the search immediately. This stops …\nRepresents the outcome of an operation applied in the …\nThe weight type in a Treap. It is used to perform …\nRepresents the possible directions in a binary tree search …\nThe external map which can computing <code>SortKey</code> from <code>SearchKey</code>…\nRepresents a successful search, indicating a feasible …\nThe search key in the TreapMap.\nSearching in <code>Treap</code> requires sort key. This trait manages …\nIndicates that the search should proceed to the left child …\nIndicates to continue the search in the left subtree. This …\nIndicates that the search reached the leftmost edge of the …\nIndicates that the current search result is acceptable, …\nRepresents a dummy version of <code>ConsolidatableWeight</code>.\nA node in a treap-map data structure.\nIndicates that the search should proceed to the right …\nIndicates to continue the search in the right subtree, …\nIndicates that the search reached the rightmost edge of …\nSimilar to <code>LeftOrStop</code>, but for the right subtree. …\nRepresents the directions for the search in …\nThe search key type in the TreapMap, supporting …\nRepresents the possible outcomes of the …\nIf <code>TreapMap</code> is indexed in the same key as the inside …\nThe sort key in the treap.\nIndicates that the current search result is acceptable and …\nA treap map data structure.\n<code>TreapMap</code> is a struct which implements a treap which can be …\nThe stored value.\nThe stored value.\nThe consolidable weight.\nThe consolidable weight.\nPerforms a binary search in a treap-map.\nCombine another weight into <code>self</code>. It allows for …\nCombine another weight into <code>self</code>. It allows for …\nCombine two weights into a single one.\nA flag indicating whether the node should be deleted …\nCreate a default or ‘zero’ value for the weight. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the sort key for a given search key. Returns <code>None</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key exposed externally. Used for key-based searches …\nNumber of the keys\nGenerate the sort key from a key-value pair.\nCompare the key.\nThe value to be forwarded as the return value of the <code>update</code>\nSee details in <code>crate::accumulate_weight_search</code>\nSee details in <code>crate::accumulate_weight_search</code> If the …\nThe sorting key for the treap-map. If the type is <code>()</code>, the …\nUpdates the value of a node with the given key in the …\nA flag indicating whether the operation has changed the …\nA flag indicating whether the operation has modified the …\nThe value stored in the node.\nInvoked when a new key-value pair is changed in the Treap.\nThe weight of the node, used by the treap-map to maintain …")