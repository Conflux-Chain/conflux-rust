searchState.loadedDescShard("cfx_rpc_builder", 0, "Address already in use.\nUse <em>all</em> available modules.\nAuth.\nWs and http server configured on same port but with …\nConflicting modules between http and ws servers.\nWs and http server configured on same port but with …\nThrown when IPC server fails to start. Custom error.\n<code>admin_</code> module <code>debug_</code> module\n<code>eth_</code> module\nAn <code>IdProvider</code> for ethereum subscription ids.\neth, ethpubsub(not implemented)\nHttp.\nA no-op middleware.\n<code>net_</code> module\n<code>parity_</code> module\n<code>rpc_</code> module\nRpc Server related errors\nA builder type to configure the RPC module: See <code>RpcModule</code>\nDescribes the modules that should be installed.\nA Helper type the holds instances of the configured …\nA builder type for configuring and launching the servers …\nA handle to the spawned servers.\nThe standard modules to instantiate by default <code>eth</code>, <code>net</code>, …\nOnly use the configured modules.\nBuilder to configure and create a JSON-RPC server\nThrown during server start.\nRpc server kind.\nTwo middlewares chained together.\nThe default modules <code>eth</code>, <code>net</code>, <code>web3</code>\n<code>trace_</code> module\nHolds modules to be installed per transport type\nHolds installed modules per transport type.\n<code>txpool_</code> module\nWebsocket.\n<code>web3_</code> module\nWS and http on the same port\nErrors when trying to launch ws and http server on the …\nCors parsing error. Http and WS server configured on the …\nReturns a selection of <code>EthRpcModule</code> with all …\nReturns all variant names of the enum\nReturns all variants of the enum\nReturns true if both selections are identical.\nReturns the string representation of the module.\nConfigures all <code>RpcModule</code>s specific to the given …\nFinalize the configuration of the server. Consumes the …\nFinalizes the configuration of the server with customized …\nConfigure a custom <code>tokio::runtime::Handle</code> to run the …\nAll modules that are available by default on IPC.\nDisable WebSocket ping/pong on the server.\nEnable WebSocket ping/pong on the server.\nReturns the appropriate flags for each variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if any server is configured.\nCreates a new config with only http set\nReturns the <code>RpcModuleSelection</code> for the http transport\nReturns the <code>SocketAddr</code> of the http server\nReturns the <code>SocketAddr</code> of the http server if started.\nGet a mutable reference to the\nModules present in http but not in ws.\nConfigure the server to only serve JSON-RPC HTTP requests.\nReturns the url to the http server\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the selection into a <code>HashSet</code>.\nReturns true if no selection is configured\nReturns true if no transports are configured\nReturns an iterator over all configured <code>EthRpcModule</code>\nReturns the number of modules in the selection\nSet the maximum number of connections allowed. Default is …\nSet the maximum size of a request body in bytes. Default …\nSet the maximum size of a response body in bytes. Default …\nSet the maximum number of connections allowed. Default is …\nMerge the given Methods in all configured methods.\nMerge the given Methods in the configured http methods.\nMerge the given Methods in the configured ws methods.\nReturns all installed methods\nReturns a merged <code>RpcModule</code>\nReturns the <code>TransportRpcModuleConfig</code> used to configure this\nPopulates a new <code>RpcModule</code> based on the selected …\nReturns all variants of the enum\nCreate a new <code>Identity</code> value\nCreate a new <code>Stack</code>.\nCreate a default server builder.\nModules present in both http and ws.\nRemoves the method with the given name from the configured …\nRemoves the method with the given name from all configured …\nRemoves the method with the given name from the configured …\nConverts an <code>io::Error</code> to a more descriptive <code>RpcError</code>.\nConfigure how batch requests shall be handled by the …\nCreates a new config with only http set\nConfigure a custom <code>tower::ServiceBuilder</code> middleware for …\nConfigure custom <code>subscription ID</code> provider for the server …\nThe server enforces backpressure which means that <code>n</code> …\nEnable middleware that is invoked on every JSON-RPC call.\nConfigure <code>TCP_NODELAY</code> on the socket to the supplied value …\nCreates a new config with only ws set\nReturns the <code>RpcModuleSelection::STANDARD_MODULES</code> as a …\nTell the server to stop without waiting for the server to …\nClones the set of configured <code>EthRpcModule</code>.\nConvert the server builder to a <code>TowerServiceBuilder</code>.\nCreates a new <em>unique</em> <code>RpcModuleSelection::Selection</code> from …\nReturns the number of variants in the enum\nConfigure rpc middleware Configure the cors domains for …\nConfigures the http server\nSets the <code>RpcModuleSelection</code> for the http transport.\nConfigures the <code>SocketAddr</code> of the http server\nConfigure the cors domains for HTTP\nSets a custom <code>IdProvider</code> for all configured transports.\nConfigures the ws server\nSets the <code>RpcModuleSelection</code> for the ws transport.\nConfigures the <code>SocketAddr</code> of the ws server\nConfigure the cors domains for WS\nCreates a new config with only ws set\nReturns the <code>RpcModuleSelection</code> for the ws transport\nReturns the <code>SocketAddr</code> of the ws server\nReturns the <code>SocketAddr</code> of the ws server if started.\nGet a mutable reference to the\nModules present in ws but not in http.\nConfigure the server to only serve JSON-RPC WebSocket …\nReturns the url to the ws server\nIO error.\nIO error.\nServer kind.\nServer kind.\nHttp cors domains.\nWs cors domains.")