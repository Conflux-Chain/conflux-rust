searchState.loadedDescShard("diem_infallible", 0, "A simple wrapper around the lock() function of a …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA wrapper around <code>std::num::NonZeroUsize</code> to no longer worry …\nA simple wrapper around the lock() function of a …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nUtility macro for writing secure arithmetic operations in …\nGives the duration since the Unix epoch, notice the expect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturn the owned type consuming the lock\nlock the mutex\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\ncreates mutex\ncreates a read-write lock\nlock the rwlock in read mode\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nlock the rwlock in write mode")