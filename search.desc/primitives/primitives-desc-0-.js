searchState.loadedDescShard("primitives", 0, "Blockchain filter\nLog entry type definition.\nDefined for Rlp serialization/deserialization.\nDefined for Rlp serialization/deserialization.\nThis is the accumulated interest rate when this deposit …\nThis is the accumulated interest return.\nThis is the accumulated interest return.\nThis is the accumulated interest return.\nThis is the address of the administrator of the contract.\nThis is the address of the administrator of the contract.\nThis is the number of tokens in this deposit.\nThis is the number of tokens should be locked before …\nThis is the number of tokens used as collateral for …\nThis is the number of tokens used as collateral for …\nThis is the number of tokens used as collateral for …\nThis is the timestamp when this deposit happened, measured …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the amount of tokens sponsor for collateral to the …\nThis is the amount of tokens sponsor for gas cost to the …\nThis is the address of the sponsor for collateral of the …\nThis is the address of the sponsor for gas cost of the …\nThis is the upper bound of sponsor gas cost per tx.\nThis is the sponsor information of the contract.\nThis is the sponsor information of the contract.\nThis is the number of tokens used in staking.\nThis is the number of tokens used in staking.\nThis is the number of tokens used in staking.\nThis is the storage point introduced in CIP-107\nThis is the timestamp when the vote right will be invalid, …\nA block, encoded as it is on the block chain.\nApproximated rlp size of the block.\nApproximated rlp size of the block.\nApproximated rlp size of block with transaction public key.\nApproximated rlp size of block with transaction public key.\nThe header hash of this block.\nThe block header\nCompute Tx ShortId from hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe nonce for use in short id calculation\nStore the txns reconstructed, None means not received\nThe size filled in the RPC response. It returns the …\nConstruct a new compact block with random nonce This block …\nThe transactions in this block.\nA list of tx short ids\nA block header.\nThe height to start fixing the wrong encoding/decoding of …\nGet the adaptive field of the header\nApproximated rlp size of the block header.\nApproximated rlp size of the block header\nGet the author field of the header.\nGet the blame field of the header\nCompute the hash of the block.\nA helper function for <code>compute_next_price</code> which takes a …\nGet the custom data field of the header.\nGet the deferred block logs bloom hash field of the header.\nGet the deferred block receipts root field of the header.\nGet the deferred state root field of the header.\nGet the difficulty field of the header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit field of the header.\nGet the hash of the block.\nGet the block height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the nonce field of the header.\nGet the parent_hash field of the header.\nGet the PoS reference.\nPOW quality of the block\nGet the hash of PoW problem.\nGet the referee hashes field of the header.\nGet the RLP representation of this header.\nGet the RLP representation of this header(except nonce).\nSet the custom filed of the header.\nSet the nonce field of the header.\nSet the timestamp filed of the header.\nPlace this header and its <code>pow_hash</code> into an RLP stream …\nGet the timestamp field of the header.\nGet the transactions root field of the header.\nEarliest block (checkpoint).\nUniquely identifies epoch.\nThe latest checkpoint (cur_era_genesis)\nThe latest confirmed block (based on the estimation of the …\nThe latest finalized (confirmed by PoS) block\nLatest mined block.\nLatest block with state.\nEpoch number within canon blockchain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlock cannot be served as it was already pruned from db on …\nBlock has not been executed yet\nFilter error with custom error message (e.g. timeout)\nEpoch cannot be served as it was already pruned from db on …\nErrors concerning log filtering.\nFilter has wrong block numbers set.\nFilter has wrong epoch numbers set.\nLog event Filter.\nThere was a pivot chain reorganization during log filtering\nRoots for verifying the requested epochs are unavailable.\nThe block requested does not exist\nSearch addresses.\nReturns combinations of each address and topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if given log entry matches filter.\nSpace: Conflux or Ethereum.\nSearch topics.\nIndicate if the log filter can be trusted, so we do not …\nThis trait checks whether a variable equals to …\nLog localized in a blockchain.\nA record of execution for a <code>LOG</code> operation.\nThe address of the contract executing at the point of the …\nBlock in which this log was created.\nCalculates the bloom of this log entry.\nThe data associated with the <code>LOG</code> operation.\nPlain log entry.\nEpoch number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog position in the epoch.\nThe space associated with <code>address</code>.\nThe topics associated with the <code>LOG</code> operation.\nHash of transaction in which this log was created.\nIndex of transaction within block.\nLog position in the transaction.\nInformation describing execution of a block.\nInformation describing execution of a transaction.\nThe total gas used (not gas charged) in the block …\nNumber of storage collateral units to deposit / refund …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas fee charged for transaction execution.\nThe designated account to bear the gas fee, if any.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe OR-wide combination of all logs’ blooms for this …\nThe logs stemming from this transaction.\nTransaction outcome.\nThis is the receipts of transaction execution in this …\nThis is the amount of secondary reward this block.\nThe designated account to bear the storage fee, if any.\nThe error messages for each transaction. A successful …\nThe Merkle Hash for an empty MPT (either as a subtree or …\nThe deferred state root consists of 3 parts: snapshot, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe padding is uniquely generated for DeltaMPT at each …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction is already imported to the queue\nCalls contract at given address. In the case of a …\nChain id in the transaction doesn’t match the chain id …\nCreate creates new contract.\nEpoch height out of bound.\nTransaction types have not been activated\nTransactions gas is higher then current gas limit\nSender doesn’t have enough funds to pay for this …\nTransaction’s gas is below currently set minimal gas …\nTransaction’s gas price is below threshold.\nTransaction’s gas limit (aka gas) is invalid.\nReceiver with invalid type bit.\nInvalid RLP encoding\nSignature error\nTransaction was not imported to the queue because limit …\nThe gas paid for transaction is lower than base gas.\nA signed transaction with successfully recovered <code>sender</code>.\nTransaction is not valid anymore (state already has higher …\nTransaction too big\nTransaction has too low fee (there is already a …\nTransaction nonce exceeds local limit.\nErrors concerning transaction processing.\nSigned transaction information without verified signature.\nSigned transaction information without verified signature.\nShorter id for transactions in compact blocks\nFake address for unsigned transactions.\nChecks whether the signature has a low ‘s’ value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the transaction\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether signature is empty.\nChecks if signature is empty.\nTry to verify transaction and recover sender.\nThe R field of the signature; helps describe the point on …\nRecovers the public key of the sender.\nThe transaction size when serialized in rlp\nThe S field of the signature; helps describe the point on …\nReturns transaction sender.\nConstruct a signature object from the sig.\nSerialize part.\nPlain Transaction.\nThe V field of the signature; helps describe which half of …\nSigns the transaction with signature.\nSenders balance\nTransaction cost\nGas provided.\nTransaction gas price\nTransaction gas\nDeclared transaction gas\nCurrent gas limit\nMinimal expected gas price\nMinimal expected gas\nAbsolute minimum gas required.\nAction, can be either call or contract create.\nThe chain id of the transaction\nTransaction data.\nReplay protection logic for v part of transaction’s …\nFake sign phantom transactions.\nFake sign call requests in <code>eth_call</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas paid up front for transaction execution.\nGas price.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNonce.\nTransferred value.\nAdds chain id into v\nReturns refined v 0 if <code>v</code> would have been 27 under “…\nAction, can be either call or contract create.\nThe chain id of the transaction\nTransaction data.\nThe epoch height of the transaction. A transaction can …\nSpecify the sender; this won’t survive the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas paid up front for transaction execution.\nGas price.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNonce.\nMaximum storage increasement in this execution.\nTransferred value.\nRepresents address of certain transaction within block\nBlock hash\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntrue when this index belongs to a phantom transaction\nTransaction index within the block\nTransaction index to be used in RPC responses")