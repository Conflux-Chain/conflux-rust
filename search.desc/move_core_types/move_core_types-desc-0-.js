searchState.loadedDescShard("move_core_types", 0, "Core types for Move.\nThis module lays out the basic abstract costing schedule …\nAn identifier is the name of an entity (module, resource, …\nA struct that represents an account address.\nThe number of bytes in an address.\nHex address: 0x0\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to convert the provided byte buffer into Address.\nTries to convert the provided byte array into Address.\nA collection of changes to modules and resources under a …\nA collection of changes to a Move state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA newtype wrapper that represents the (abstract) memory …\nThe size in bytes for a non-string or address constant on …\nThe cost tables, keyed by the serialized form of the …\nFor V1 all accounts will be ~800 bytes\nA trait encoding the operations permitted on the …\nThe underlying carrier for gas-related units and costs. …\nThe  <code>GasCost</code> tracks:\nA newtype wrapper around the gas price for each unit of …\nUnits of gas as seen by clients of the Move VM.\nUnits of gas used within the Move VM, scaled for …\nAny transaction over this size will be charged …\nThe maximum size representable by AbstractMemorySize\nFor exists checks on data that doesn’t exists this is …\nOne unit of gas\nThe size in bytes for a reference on the stack\nThe size of a struct in bytes\nAdd the two <code>GasAlgebra</code>s together.\nApply a function <code>f</code> of two arguments to the carrier. Since <code>f</code>…\nDivide one <code>GasAlgebra</code> by the other.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the carrier.\nThe cost per-byte read from global storage.\nThe cost per-byte written to storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe units of gas that to be charged per byte over the …\nAny transaction over this size will be charged an …\nMap a function <code>f</code> of one argument over the underlying data.\nMap a function <code>f</code> of two arguments over the underlying …\nThe maximum gas unit price that a transaction can be …\n~5 microseconds should equal one unit of computational …\nThe minimum gas price that a transaction can be submitted …\nThe flat minimum amount of gas required for any …\nMultiply two <code>GasAlgebra</code>s together.\nProject a value into the gas algebra.\nSubtract one <code>GasAlgebra</code> from the other.\nConvert a GasCost to a total gas charge in <code>InternalGasUnits</code>…\nWe allow casting between GasAlgebras as long as they have …\nA borrowed identifier.\nAn owned identifier.\nConverts <code>self</code> to a byte slice.\nCreates a borrowed version of <code>self</code>.\nConverts <code>self</code> to a <code>&amp;str</code>.\nReturns the argument unchanged.\nConverts a vector of bytes to an <code>Identifier</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Identifier</code> into a UTF-8-encoded byte …\nConverts this <code>Identifier</code> into a <code>String</code>.\nReturns <code>true</code> if <code>self</code> has a length of zero bytes.\nReturns if this identifier is <code>&quot;&lt;SELF&gt;&quot;</code>. TODO: remove once …\nReturns true if this string is a valid identifier.\nReturns true if this string is a valid identifier.\nReturn true if this character can appear in a Move …\nReturns the length of <code>self</code> in bytes.\nCreates a new <code>Identifier</code> instance.\nRepresents the initial key into global storage where we …\nRepresents the intitial key into global storage where we …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the transaction arguments into Move values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn <code>AbortLocation</code> specifies where a Move program <code>abort</code> …\nThe maximum status code for deserialization statuses\nThe minimum status code for deserialization statuses\nThe maximum status code for runtim statuses\nThe minimum status code for runtime statuses\nIndicates an error from the VM, e.g. OUT_OF_GAS, …\nThe VM status corresponding to an EXECUTED status code\nIndicates an failure from inside Move code, where the VM …\nThe maximum status code for invariant violation statuses\nThe minimum status code for invariant violation statuses\nIndicates <code>abort</code> occurred in the specified module\nIndicates an <code>abort</code> from inside Move code. Contains the …\nIndicates the <code>abort</code> occurred in a script\nWe don’t derive Arbitrary on this enum because it is too …\nA status type is one of 5 different variants, along with a …\nThe maximum status code for validation statuses\nThe minimum status code for validation statuses\nThe maximum status code for verification statuses\nThe minimum status code for verification statuses\nA <code>VMStatus</code> is represented as either\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Ok</code> with a recorded status if it should be kept, <code>Err</code>…\nReturns the Move abort code if the status is <code>MoveAbort</code>, …\nReturn the status code for the <code>VMStatus</code>\nReturn the status type for this <code>VMStatus</code>. This is solely …\nReturn the status type for this status code\nThe ModuleId for the Account module.\nThe Identifier for the Account module.\nThe name of the Account module.\nThe ModuleId for the Designated Dealer module.\nThe Identifier for the Designated Dealer module.\nThe name of the Designated Dealer module.\nThe ModuleId for the Diem module.\nThe Identifier for the Diem module.\nThe name of the Diem module.\nLocation for an abort in the Account module")