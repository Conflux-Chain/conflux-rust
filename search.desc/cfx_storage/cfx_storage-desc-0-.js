searchState.loadedDescShard("cfx_storage", 0, "Consensus parameter is only configurable in test mode.\nCowNodeRef facilities access and modification to trie …\nValid dirty slot ranges from [0..DIRTY_SLOT_LIMIT). The …\nContains the error value\nClasses implement KVInserter is used to store key-values …\nA node consists of an optional compressed path (concept of …\nThe MSB is used to indicate if a node is in mem or on disk,\nContains the success value\nA container to store information about owned nodes.\nPre-allocated storage for a uniform data type. The …\nKeep the snapshot at the same epoch as the checkpoint. …\nReturn the number of values the slab can store without …\nReturns: old_value, is_self_about_to_delete, …\nReturns old_child, is_self_about_to_delete, …\nClear the slab of all values.\nReturns the (snapshot_mpt_key, child_index, trie_node) …\nReturn <code>true</code> if a value is associated with the given key.\nnew_value can only be set according to the situation. …\nIf <code>unsafe_mode</code> is true, data loss or database corruption …\nThe statement must be created with the db. Then the …\nCombine and write boundary subtree nodes after all chunks …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the value associated with the given …\nReturn a mutable reference to the value associated with …\nFind trie root by merkle root is mainly for debugging.\nReturn a reference to the value associated with the given …\nReturn a mutable reference to the value associated with …\nGet the value under <code>key</code> starting from <code>root</code>.\nCheck if the key can be proved. The only reason of …\nInsert a value in the slab, returning key assigned to the …\nInsertion takes an extra argument <code>original_db_key</code> to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an integer-indexed <code>SimpleMpt</code> with <code>num_keys</code> elements …\nReturn <code>true</code> if there are no values stored in the slab.\nVerify that the trie <code>root</code> has <code>value</code> under <code>key</code>. Use <code>None</code> …\nVerify that the trie <code>root</code> has a node with <code>node_merkle</code> …\nReturn an iterator that allows modifying each value.\ny must be a valid path following x. i.e. when x ends with …\nReturn the number of stored values.\nCreate a new CompressedPathRaw from valid (path_slice, …\nMakes sure that the proof nodes are valid and connected at …\nRemove and return the value associated with the given key.\nReserve capacity for at least <code>additional</code> more values to be …\nReserve the minimum capacity required to store exactly …\nRetain only the elements specified by the predicate.\nWe assume that the keys and values are serialized in …\nShrink the capacity of the slab as much as possible.\nWhen numbered key is turned off, the bytes_key_table is …\nReturn a handle to a vacant entry allowing for further …\nConstruct a new, empty <code>Slab</code> with the specified capacity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCowNodeRef facilities access and modification to trie …\nThis class can only be meaningfully used internally by …\nRecursively commit dirty nodes.\nIf owned, run f_owned on trie node; otherwise run f_ref on …\nThe trie node obtained from CowNodeRef is invalidated at …\nThe deletion is always successful. When return value is …\nWhen the node is unowned, it doesn’t make sense to do …\nAssert that the CowNodeRef doesn’t own something.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet if unowned, compute if owned.\nThe returned MaybeOwnedTrieNode is considered a borrow of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the value out of Self. Self is safe to drop.\nThe max number of opened MPT databases at the same time. …\nLimit the number of open snapshots to set an upper limit …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA block defines a list of transactions that it sees and …\nIt’s costly to compute state root however it’s only …\nDelete all key/value pairs with access_key_prefix as …\nReturns the argument unchanged.\nCompute the merkle of the node under <code>access_key</code> in all …\nCalls <code>U::from(self)</code>.\nCheck if we can make a new snapshot, and if so, make it in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAt the boundary of snapshot, getting a state for new epoch …\ndelta_mpt_key_padding is required. When None is passed, it…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHeight is used to check for shifting snapshot. The state …\nDestroy a Delta DB. Keep in mind that this method is …\nOne of the elementary value type supported by db.\nThis trait is to help with the committing of the …\nThe difference between this trait and KeyValueDbTraitRead …\nThese special get methods are provided for db like sqlite, …\nCommit may be retried upon failure.\nReturn Some(maybe_old_value) or None if the db don’t …\nReturn Some(maybe_old_value) or None if the db don’t …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen error occured within a transaction before commit, …\nImmediate_write indicates whether the transaction should …\nStore already_open_snapshots and open_semaphore to update …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStore already_open_snapshots and open_semaphore to update …\nThis field is true when the snapshot info is kept but the …\nThe trait for database manager of Snapshot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe use <code>VanillaTrieNode&lt;(MerkleHash, i64)&gt;</code> instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe visitor can only be used once to modify. Returns …\nThe visitor can only be used once to modify. Returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreturn all key/value pairs given the prefix\nNo-op\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWith discard_write, it tests if the MptMerger does not …\nNo-op\nOnly used by storage benchmark due to incompatibility of …\nThe purpose of this trait is to create a new value of a …\nUnoptimized default implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuppose you have a trait Trait and some type T: Trait, …\nThe trait automatically implements for D: Deref with …\nThis trait is automatically implemented for the Trait …\nThis trait is automatically implemented for the Trait …\nPlease read all comments in this file to prevent leaking …\nTo prevent automatic copy from leaking guarded value. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIt’s unsafe to drop the returned guard manually, or to …\nCalls <code>U::from(self)</code>.\nTo make it easy for compiler to compute automated …\nElementConstrain is a trait that can be made into trait …\nTrait on Index, meaning that the element at Index for …\nThis trait is on Tuple.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust stdlib doesn’t derive Default for this many …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis trait is designed for associated type in trait, such …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")