searchState.loadedDescShard("conflux", 0, "Manage accounts\nAccount related subcommands\n————— Account Subcommands ————— …\nGet balance of specified account\nGet the best block hash\nGet block by epoch\nGet block by hash\nGet the total block count\nGet block by hash with pivot chain assumption\nGet blocks of specified epoch\nExecutes a new message call immediately without creating a …\nList “ALL” blocks in topological order\nRemove all transactions\nConflux client\nGet bytecode of specified contract\nGet the consensus graph state\nList exact details of all transactions\nDisconnect a node\nGet epoch number\nExecutes a call request and returns the gas used\nGet the recent transaction good TPS\nImport accounts from JSON UTC keystore files\nList textual summary of all transactions\nGet the detailed status of specified transaction\nList existing accounts of the given –chain (default …\nList all accounts\nLocal subcommands (requires jsonrpc_local_http_port …\nLock an unlocked account\nNetwork subcommands\nCreate a new account (and its associated key) for the …\nCreate a new account\nGet node information by ID\nGet nonce of specified account\nPoS subcommands\nGet recent mean gas price\nGet receipt by transaction hash\nReturn the transaction data needed to register the PoS keys\nRPC based subcommands to query blockchain information and …\n————— RPC Subcommands —————\n————— RPC Local Subcommands —————\nSend a signed transaction and return its hash\nSend a transaction and return its hash\nGet active session(s)\nGet skipped blocks of specified epoch\nStart PoS voting.\nGet the number of transactions for different status\nGet the current status of Conflux\nStop the conflux program\nStop sending PoS election transactions.\nStop PoS voting.\nGet the current synchronization phase\nTest subcommands (used for test purpose only)\nGet the current throttling information\nGet transaction by hash\nTransaction pool subcommands\nUnlock an account\nShow if the node is voting.\nSets the time after which accounts are re-read from disk.\nAccount address / Contract address\nAccount address / Contract address\nAddress of the account\nAddress of the account\nAccount address\nAccount address\nSets the root path of db.\nBlock hash\nSets a custom list of bootnodes.\nSets a custom config file.\nHash of the method signature and encoded parameters\nHash of the method signature and encoded parameters\nHash of the method signature and encoded parameters\nSets the db cache size.\nSets the compaction profile of RocksDB.\nSets the encryption password for the pos private key file. …\nDuration to unlock the account, use 0x0 to unlock …\nSets maximum throttling queue size of egress.\nSets minimum throttling queue size of egress.\nSets egress queue capacity of P2P network.\nEnable discovery protocol.\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch (latest_mined, latest_state, earliest or epoch …\nEpoch\nEpoch\nEpoch number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransaction from address\nTransaction from address\nTransaction from address\nGas provided for transaction execution\nGas provided for transaction execution\nGas provided for transaction execution\nTransaction gas price\nTransaction gas price\nTransaction gas price\nSets the size of the epoch batches used during log …\nSets the maximum number of allowed blocks during log …\nSets the maximum number of allowed epochs during log …\nSets the maximum number of log entries returned during log …\nBlock hash / Transaction hash\nBlock hash / Transaction hash\nBlock hash / Transaction hash\nBlock hash / Transaction hash\nNode ID\nNode ID\nNode ID\nA list of file paths to import.\nWhether to return detailed transactions in block\nWhether to return detailed transactions in block\nset this means the node uses its local safety data instead …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecify CORS header for HTTP JSON-RPC API responses.\nEnable HTTP/1.1 keep alive header.\nSpecify the port for the HTTP JSON-RPC API server.\nSpecify the port for the TCP JSON-RPC API server.\nSpecify the port for the WebSocket JSON-RPC API server.\nSpecify the number of iterations to use when deriving key …\nSets the ledger cache size.\nSets the test chain json file.\nSets a custom log config file.\nSpecify the filename for the log. Stdout will be used by …\nCan be error/warn/info/debug/trace. Default is the info …\nTransaction max fee per gas\nTransaction max fee per gas\nTransaction max fee per gas\nTransaction max priority fee per gas\nTransaction max priority fee per gas\nTransaction max priority fee per gas\nSet the address to receive mining rewards.\nUse the preset testing configurations. dev or test.\nSets a custom secret key to generate unique node ID.\nSets a custom directory for network configurations.\nHow long Conflux waits for promoting a peer to trustworthy …\nHow often Conflux updates its peer table (default 300).\nTransaction nonce\nTransaction nonce\nTransaction nonce\nOperation to update node database\nProvide a file containing a password for unlocking an …\nPivot block hash\nSpecify the port for P2P connections.\nIf true, the node will start PoS election and voting if it…\nThe voting power to register (one voting power is 100 …\nSets a custom public address to be connected by others.\nSigned transaction data\nStart mining if set to true. Ensure that mining-author is …\nStorage limit for the transaction\nSets test mode for adding latency\nTransaction to address\nTransaction to address\nTransaction to address (empty to create contract)\nTransaction type\nTransaction type\nTransaction type\nSpecify the UDP port for peer discovery.\nURL of RPC server\nvalue sent with this transaction\nvalue sent with this transaction\nvalue sent with this transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlush output buffer.\nRead a password from password file.\nPrompts user asking for password.\nReads passwords from files. Treats each line as a separate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")