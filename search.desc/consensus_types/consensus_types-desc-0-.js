searchState.loadedDescShard("consensus_types", 0, "Block has the core data of a consensus block that should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct new genesis block for next epoch …\nThe NIL blocks are special: they’re not carrying any …\nVerifies that the proposal and the QC are correctly signed.\nMakes sure that the proposal makes sense, independently of …\nBlock has the core data of a consensus block that should …\nCryptographic hasher for an BCS-serializable #item\nA genesis block is the first committed block in any epoch …\nNIL blocks don’t have authors or signatures: they’re …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthor of the block that can be validated by the author’…\nT of the block (e.g. one or more transaction(s)\nRPC to get a chain of block of the given length starting …\nCarries the returned blocks and the retrieval status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthor refers to the author’s account address\nThe payload in block.\nThe round of a block is a consensus-internal counter, …\nReturns the argument unchanged.\nget_ledger_block\nCalls <code>U::from(self)</code>.\nsave_ledger_blocks\nRequest to get a EpochChangeProof from current_epoch to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecutedBlocks are managed in a speculative tree, the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProposalMsg contains the required information for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new proposal.\nVerifies that the ProposalMsg is well-formed.\nQuorumCert for the genesis block deterministically …\nIf the QC commits reconfiguration and starts a new epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData structure for safety rules to ensure consensus safety.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis struct describes basic synchronization metadata.\nReturns the argument unchanged.\nHighest ledger info\nHighest quorum certificate\nThe highest round the SyncInfo carries.\nHighest timeout certificate if available\nCalls <code>U::from(self)</code>.\nThis structure contains all the information necessary to …\nCryptographic hasher for an BCS-serializable #item\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimeoutCertificate is a proof that 2f+1 participants in …\nReturns the epoch of the timeout certificate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new TimeoutCertificate\nReturns the round of the timeout certificate\nReturns the signatures certifying the round\nVerifies the signatures for the round\nVote is the struct that is ultimately sent by the voter in …\nGenerates a round signature, which can then be used for …\nReturn the author of the vote\nReturn the epoch of the vote\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe vote message is considered a timeout vote message if …\nReturn the LedgerInfo associated with this vote\nGenerates a new Vote corresponding to the “fast-vote” …\nGenerates a new Vote using a signature over the specified …\nReturn the signature of the vote\nReturns the hash of the data represent by a timeout …\nReturns the signature for the …\nVerifies that the consensus data hash of LedgerInfo …\nVoteData keeps the information about the block, and its …\nCryptographic hasher for an BCS-serializable #item\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new VoteData from the block information of a …\nReturns block information associated to the block being …\nReturns block information associated to the block being …\nWell-formedness checks that are independent of the current …\nVoteMsg is the struct that is ultimately sent by the voter …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSyncInfo of the given vote message\nContainer for actual voting material\nWraps a vote_proposal and its signature.\nThis structure contains all the information needed by …\nCryptographic hasher for an BCS-serializable #item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe signature of this proposal’s hash from Diem …\nThe vote proposal to be signed.")