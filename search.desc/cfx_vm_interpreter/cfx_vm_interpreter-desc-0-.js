searchState.loadedDescShard("cfx_vm_interpreter", 0, "Cost calculation type. For low-gas usage we calculate …\nFinalization result. Gas Left: either it is a known value, …\nTypes that can be “finalized” using an EVM.\nRUST EVM\nType of EVM to use.\nReturn all possible VMs (Interpreter)\nApply execution state changes or revert them.\nConverts this cost into <code>U256</code>\nConvert to usize (may panic)\nCreate tests by injecting different VM factories\nCreate ignored tests by injecting different VM factories\nEvm factory.\nConsume the context, call return if necessary, and produce …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to fit <code>U256</code> into this <code>Cost</code> type\nFinal amount of gas left.\nVM Instructions list and utility functions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd with overflow\nMultiple with overflow\nSingle-step full multiplication and shift: …\nReturn data buffer.\nEvm factory. Creates appropriate Evm.\nCreate fresh instance of VM Might choose implementation …\nReturns native rust evm factory\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new instance of specific <code>VMType</code> factory, with a …\naddition operation\nunsigned modular addition\nget address of currently executing account\nbitwise AND operation\nget balance of the given account\nbase fee for EIP-1559 (EIP-3198)\nMarks the entry point to a subroutine (pre cip-142). load …\nget hash of most recent complete block\nretrieve single byte from word\n2 Quick\nmessage-call into an account\nmessage-call with another account’s code only\ncopy input data in current environment to memory\nget input data of current environment\nget size of input data in current environment\nget caller address\nget deposited value by the instruction/transaction …\nget chain ID\ncopy code running in current environment to memory\nget size of code running in current environment\nget the block’s coinbase address\ncreate a new account with associated code\ncreate a new account and set creation address to …\nlike CALLCODE but keeps caller’s value and sender\nget the block’s difficulty\ninteger division operation\ncopies the highest item in the stack to the top of the …\ncopies the 10th highest item in the stack to the top of …\ncopies the 11th highest item in the stack to the top of …\ncopies the 12th highest item in the stack to the top of …\ncopies the 13th highest item in the stack to the top of …\ncopies the 14th highest item in the stack to the top of …\ncopies the 15th highest item in the stack to the top of …\ncopies the 16th highest item in the stack to the top of …\ncopies the second highest item in the stack to the top of …\ncopies the third highest item in the stack to the top of …\ncopies the 4th highest item in the stack to the top of the …\ncopies the 5th highest item in the stack to the top of the …\ncopies the 6th highest item in the stack to the top of the …\ncopies the 7th highest item in the stack to the top of the …\ncopies the 8th highest item in the stack to the top of the …\ncopies the 9th highest item in the stack to the top of the …\nequality comparison\nexponential operation\ncopy external code (from another contract)\nreturn the keccak256 hash of contract code\nget external code size (from another contract)\n20 Ext\nget the amount of available gas\nget the block’s gas limit\nget price of gas in current environment\ngreater-than comparison\n10 Slow\nStatic instruction table.\nsimple not operator\nVirtual machine bytecode instruction.\nEVM instruction information.\nalter the program counter\nset a potential jump destination\nconditionally alter the program counter\nJumps to a defined BEGINSUB subroutine (pre cip-143). copy …\nMakes a log entry, no topics.\nMakes a log entry, 1 topic.\nMakes a log entry, 2 topics.\nMakes a log entry, 3 topics.\nMakes a log entry, 4 topics.\nless-than comparison\n5 Fast\nMaximal number of topics for log instructions\nload word from memory\nmodulo remainder operation\nget the size of active memory\nsave word to memory\nsave byte to memory\nmultiplication operation\nunsigned modular multiplication\n8 Mid\nbitwise NOT operation\nget the block’s number\nbitwise OR operation\nget execution origination address\nget the program counter\nremove item from stack\nplace zero item on stack (EIP-3855/CIP-119)\nplace 1 byte item on stack\nplace 10 byte item on stack\nplace 11 byte item on stack\nplace 12 byte item on stack\nplace 13 byte item on stack\nplace 14 byte item on stack\nplace 15 byte item on stack\nplace 16 byte item on stack\nplace 17 byte item on stack\nplace 18 byte item on stack\nplace 19 byte item on stack\nplace 2 byte item on stack\nplace 20 byte item on stack\nplace 21 byte item on stack\nplace 22 byte item on stack\nplace 23 byte item on stack\nplace 24 byte item on stack\nplace 25 byte item on stack\nplace 26 byte item on stack\nplace 27 byte item on stack\nplace 28 byte item on stack\nplace 29 byte item on stack\nplace 3 byte item on stack\nplace 30 byte item on stack\nplace 31 byte item on stack\nplace 32 byte item on stack\nplace 4 byte item on stack\nplace 5 byte item on stack\nplace 6 byte item on stack\nplace 7 byte item on stack\nplace 8 byte item on stack\nplace 9 byte item on stack\nhalt execution returning output data\ncopy return data buffer to memory\nget the size of the return data buffer for the last call\nReturns from a subroutine (pre cip-142). store word from …\nstop execution and revert state changes. Return output …\narithmetic shift right operation\nsigned integer division operation\nget balance of own account\nsigned greater-than comparison\ncompute SHA3-256 hash\nshift left operation\nlogical shift right operation\nextend length of signed integer\nload word from storage\nsigned less-than comparison\nsigned modulo remainder operation\nsave word to storage\nlike CALL but it does not take value, nor modify the state\nhalts execution\nsubtraction operation\nhalt execution and register account for later deletion\nswaps the highest and second highest value on the stack\nswaps the highest and 11th highest value on the stack\nswaps the highest and 12th highest value on the stack\nswaps the highest and 13th highest value on the stack\nswaps the highest and 14th highest value on the stack\nswaps the highest and 15th highest value on the stack\nswaps the highest and 16th highest value on the stack\nswaps the highest and 17th highest value on the stack\nswaps the highest and third highest value on the stack\nswaps the highest and 4th highest value on the stack\nswaps the highest and 5th highest value on the stack\nswaps the highest and 6th highest value on the stack\nswaps the highest and 7th highest value on the stack\nswaps the highest and 8th highest value on the stack\nswaps the highest and 9th highest value on the stack\nswaps the highest and 10th highest value on the stack\nMultiparam or otherwise special\nget the block’s timestamp\n3 Fastest\nbitwise XOR operation\n0 Zero\nNumber of stack arguments.\nReturns stack position of item to duplicate DUP1 -&gt; 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from u8 to the given enum\nReturns the index in schedule for specific <code>GasPriceTier</code>\nReturns the instruction info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if given instruction is <code>PUSHN</code> instruction.\nReturns number of topics to take from stack LOG0 -&gt; 0\nMnemonic name.\nCreate new instruction info.\nReturns number of bytes to read for <code>PUSHN</code> instruction …\nNumber of returned stack items.\nReturns stack position of item to SWAP top with SWAP1 -&gt; 1\nGas price tier.")