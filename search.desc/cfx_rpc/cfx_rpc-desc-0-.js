searchState.loadedDescShard("cfx_rpc", 0, "Returns a list of addresses owned by client.\nReturns the client coinbase address.\nReturns the balance of the account of given address.\nReturns information about a block by hash.\nReturns information about a block by number.\nReturns the number of most recent block.\nReturns all transaction receipts for a given block.\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block matching the …\nReturns the number of uncles in a block from a block …\nReturns the number of uncles in a block with given block …\nExecutes a new message call immediately without creating a …\nSimulate arbitrary number of transactions at an arbitrary …\nReturns the chain ID of the current network.\nGenerates an access list for a transaction.\nGenerates and returns an estimate of how much gas is …\nIntroduced in EIP-4844, returns the current blob base fee …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current price per gas in wei.\nReturns code at a given address at given block number.\nReturns the number of hashes per second that the node is …\nReturns the block’s header at given hash.\nReturns the block’s header at given number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the client is actively mining new blocks.\nReturns the account details by specifying an address and a …\nReturns the protocol version encoded as a string.\nReturns information about a raw transaction by block hash …\nReturns information about a raw transaction by block …\nReturns the EIP-2718 encoded transaction if it exists.\nSends signed transaction, returning its hash.\nSends transaction; will block waiting for signer to return …\nReturns an Ethereum specific signature with: …\nSigns a transaction that can be submitted to the network …\n<code>eth_simulateV1</code> executes an arbitrary number of …\nReturns the value from a storage position at a given …\nReturns the hash of the current block, the seedHash, and …\nUsed for submitting a proof-of-work solution.\nReturns an object with data about the sync status or false.\nReturns information about a transaction by block hash and …\nReturns information about a transaction by block number …\nReturns the information about a transaction requested by …\nReturns information about a transaction by sender and …\nReturns the number of transactions sent from an address at …\nReturns the receipt of a transaction by transaction hash.\nReturns an uncle block of the given block and index.\nReturns an uncle block of the given block and index.\nThe goal of EpochQueue is to keep a distance from the tip …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper type with all filter state data.\nIndexes all rpc poll requests.\nEth filter rpc implementation for a full node.\nCurrent best epoch number.\nGet a block hash by block id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet logs that match the given filter.\nCreates new Eth filter client.\npending transaction hashes at the given block (unordered).\nGet a reference to the poll manager.\nNumber of last block which client was notified about.\nNumber of From block number, last seen block hash, pending …\nHashes of all pending transactions the client knows about.\nFilter state.\nThread-safe filter state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns only last <code>n</code> logs\nModify underlying filter\nNew <code>SyncPollFilter</code>\nIndexes all poll requests.\nReturns id which can be used for new poll.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new instance of indexer\nGet a reference to stored poll filter\nGet a mutable reference to stored poll filter\nRemoves poll info.\nCurrent best epoch number.\nGet a block hash by block id.\nGet a reference to ConsensusGraph\nGet epochs since last query\nGet logs limitation\nGet logs that match the given filter.\nGet logs that match the given filter for specific epoch\npending transaction hashes at the given block (unordered).\nGet a reference to the poll manager.\nGet a clone of SharedConsensusGraph")