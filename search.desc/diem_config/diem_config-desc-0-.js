searchState.loadedDescShard("diem_config", 0, "Convenience structs and functions for generating a random …\nThis file implements a KeyPair data structure.\nDefines how execution correctness should be run\nThis is an absolute path and not relative to data_dir\nCurrent supported protocol negotiation handshake version. …\nThe identity is stored within the config.\nThis represents an identity in a secure-storage as defined …\nThis runs execution correctness in the same thread as …\nThis runs safety rules in the same thread as event …\nConfig pulls in configuration information from the config …\nRepresents a single seed configuration for a seed peer\nIdentifier of a node, represented as (network_id, peer_id)\nRepresents the Role that a peer plays in the network …\nThis is the production, separate service approach\nThis is the production, separate service approach\nPort selected RocksDB options for tuning underlying …\nDefines how safety rules should be executed\nThis runs safety rules in the same thread as event …\nThis runs safety rules in the same thread as event …\nThis creates a separate thread to run execution …\nThis creates a separate thread to run safety rules, it is …\nTokens can either be directly within this config or stored …\nIf a node considers a network ‘upstream’, the node …\nThe branch containing storage, defaults to master\nOptional SSL Certificate for the vault host, this is …\nTimeout for new vault socket connections, in milliseconds.\nDefault to least trusted\nDisable check-and-set when writing secrets to Vault\nAllow for disabling the throttles\nCombines two <code>Peer</code>.  Note: Does not merge duplicate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis adds a full path when loading / storing if one is not …\nReturns the upstream network preference of a network …\nInitial amount of tokens initially in the bucket\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of bytes/s for an IP\nMaximum burst of bytes for an IP\nReads the key manager config file from the given …\nReads the config file and returns the configuration object …\nPer convenience, so that NetworkId isn’t needed to be …\nA namespace is an optional portion of the path to a key …\nA namespace is an optional portion of the path to a key …\nA namespace is an optional portion of the path to a key …\nCombines <code>Vec&lt;NetworkAddress&gt;</code> keys with the <code>HashSet</code> given\nThis function assumes that the path is already a directory\nNone disables pruning. The windows is in number of …\nVault leverages leases on many tokens, specify this to …\nThe repository where storage will mount\nThe owner or account that hosts a repository\nTimeout for generic vault operations (e.g., reads and …\nRocksdb-specific configurations\nSaves the key manager config file to the given output_path.\nChecks <code>NetworkConfig</code> setups so that they exist on proper …\nVault’s URL, note: only HTTP is currently supported.\nRead, Write, Connect timeout for network operations in …\nThe authorization token for accessing the repository\nThe authorization token for accessing secrets\nReturns the number of upstream networks possible for a …\nConvenience function that builds a <code>PeerSet</code> containing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigKey places a clonable wrapper around PrivateKeys for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA grouping of common information between all networking …\nA representation of the network being used in …\nAn intra-node identifier for a network of a node unique …\nGeneralized ordering for determining which network is the …\nRoles for a prioritization of relative downstreams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRoles for a prioritization of relative upstreams\nConvenience function to specify the VFN network\nReturn an ephemeral, available port. On unix systems, the …\nExtracts one local non-loopback IP address, if one exists. …")