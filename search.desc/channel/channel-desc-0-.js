searchState.loadedDescShard("channel", 0, "Provides an mpsc (multi-producer single-consumer) channel …\nAn <code>mpsc::Receiver</code> with an <code>IntGauge</code> counting the number of …\nAn <code>mpsc::Sender</code> with an <code>IntGauge</code> counting the number of …\ndiem_channel provides an mpsc channel which has two ends …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to <code>mpsc::channel</code>, <code>new</code> creates a pair of <code>Sender</code> and …\nThe status of an element inserted into a diem_channel. If …\nThe receiving end of the diem_channel.\nThe sending end of the diem_channel.\nRemoves all the previously sent transactions that have not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Diem Channel and returns the two ends of the …\npoll_next checks whether there is something ready for …\nThis adds the message into the internal queue data …\nSame as <code>push</code>, but this function also accepts a …\nQueueStyle is an enum which can be used as a configuration …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")