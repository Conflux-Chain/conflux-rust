searchState.loadedDescShard("cfxcore", 0, "Blockchain database client.\nDatabase utilities and definitions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTODO Also set block header\nReturn None if receipts for corresponding epoch is not …\nThis function returns the block from db without wrapping …\nGet the traces for a single block without checking the …\nGet current cache size.\nCheck if all executed results of an epoch exist\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet in-mem execution commitment.\nGet persisted execution commitment. It will check db if it…\nThe in-memory state will not be updated because it’s …\nCaller should make sure the state exists.\ninsert block/header into memory cache, block/header into db\ninsert block body in memory cache and db\nTODO We can avoid persisting execution_commitments for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad commitment from db. The caller should ensure that the …\nReturn <code>None</code> if the header does not exist. Return <code>Some(None)</code>…\nReturn <code>false</code> if there is no executed results for given …\nremove block body in memory cache and db\nremove block header in memory cache and db\nremove block traces in memory cache and db\nRemove block body and block header in memory cache and db. …\nThis maintains the boundary height of available state and …\nReturn <code>(pivot_hash, tx_traces)</code>.\nThis is the original genesis block.\nThis will return the state root of true genesis block.\nGet correct roots of blamed headers from db. These are …\nCheck if a block is already marked as invalid.\nVerified roots of blamed headers stored on disk on light …\nThe structure to maintain block data under different views.\n<code>receipts</code> and <code>bloom</code> of a single block after execution. It …\nThe validity status of a block. If a block’s status …\nThe checkpoint information stored in the database\nThe start block number of an epoch. It equals to the past …\nThe local information about a block. It is NOT consistent …\nReturn …\nThe PoW epoch hash where the reward is distributed in its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn None if we do not have a corresponding data in the …\nInsert the latest data with its version. This should be …\nInsert the data with its version and update the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly keep the data in the given <code>version</code>. Called when the …\nEach time we make a new checkpoint, we will mark more data …\nReturns the argument unchanged.\nCompute the GC base range to make sure the GC progress is …\nCalls <code>U::from(self)</code>.\nGet correct roots of blamed headers from db. These are …\nTODO Use new_with_rlp_size\nReturns the argument unchanged.\nStore block info to db. Block info includes block status …\nCalls <code>U::from(self)</code>.\nGet block info from db.\nFind tx in tx_time_window that matches tx_short_ids to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecover public keys for the transactions in <code>block</code>.\nRecover the public keys for uncached transactions in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of cached invalid block hashes\nSize of ledger cache.\nSize of the ledger cache.\nCreates new cache config with given details.\nThe maximum number of cached target difficulty values\nBlocks header cache size.\nBlock Receipts cache size.\nBlock Rewards cache size.\nBlock Traces cache size.\nBlocks cache size.\nCollects unused objects from cache. First params is the …\nCompact blocks cache size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlock number index cache size.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal block info cache size.\nTotal amount used by the cache.\nTransaction indices cache size.\nImplements an unbounded SPMC broadcast channel.\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nErrors returned by <code>Timeout</code>.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nError returned by <code>try_recv</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsensusGraph is a layer on top of SynchronizationGraph. …\nWhen bench_mode is true, the PoW solution verification …\nReturns the latest epoch whose state can be exposed …\nReturns the total number of blocks processed in consensus …\nCheck if we have downloaded all the headers to find the …\nChain id configs.\nDetermine whether the next mined block should have …\nAfter considering the latest <code>pos_reference</code>, <code>parent_hash</code> …\nReturn …\nconstruct_pivot_state() rebuild pivot chain state info …\nReturn the sequence number of the current era genesis hash.\nCompute the expected difficulty of a new block given its …\n<code>block_traces</code> is a list of tuple …\nForce the engine to recompute the deferred state root for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the average gas price of the last …\nReturn the blocks without bodies in the subtree of stable …\nConvert EpochNumber to height based on the current …\nEpoch batch size used in log filtering. Larger batch sizes …\nLimits on epoch and block number ranges during log …\nMax limiation for logs\nGet the number of processed blocks (i.e., the number of …\nReturn the epoch that we are going to sync the state\nFind a trusted blame block for checkpoint\nFind a trusted blame block for snapshot full sync\nThe configuration used by inner data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild the ConsensusGraph with the initial (checkpointed) …\nThis is the main function that SynchronizationGraph calls …\nPivot hint provides validation support during blockchain …\nThe file path and checksum for <code>PivotHint</code>\nSet to <code>true</code> when we enter NormalPhase\nThe number of referees that are allowed for a block.\nReset the information in consensus graph with only …\nThe number of extra epochs that we want to keep …\nTODO: These parameters are only utilized in catch-up now. …\nThe epoch id of the remotely synchronized state. This is …\nThe epoch bound for processing a transaction. For a …\nThis function is a wrapper function for the function in …\nWait for the generation and the execution completion of a …\nBuild the ConsensusGraph with a specific era genesis block …\nImplementation details of Eras, Timer chain and Checkpoints\nConsensusGraphNodeData contains all extra information of a …\nBeta is the threshold in GHAST algorithm\nThis slab hold consensus graph node data and the array …\nReturn the latest epoch number whose state has been …\nReturn the list of best terminals when respecting a bound …\nReturn the block receipts in the current pivot view and …\nReturn possibly new parent.\nIt maintains the expected difficulty of the next local …\ndata contains all extra information of a block that will …\ndata_man is the handle to access raw block data\nIf we hit invalid state root, we will dump the information …\nOptimistic execution is the feature to execute ahead of …\nControl whether we enable the state exposer for the …\nThis function differs from <code>get_pivot_hash_from_epoch_number</code>…\nIt indicates the epoch number of the block, i.e., the …\nThe number of epochs per era. Each era is a potential …\nCompute the expected difficulty of a new block given its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe caller should ensure that <code>height</code> is within the current …\nGet the pivot hash from an epoch number. This function …\nReturn the consensus graph indexes of the pivot block …\nReturn <code>None</code> if <code>root_block</code> is not in consensus.\nReturn the epoch that we are going to sync the state\nFind a trusted blame block for snapshot full sync\nindices maps block hash to internal index.\nThe heavy block ratio (h) in GHAST algorithm\nTry to insert an outside era block, return it’s sequence …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if a block has been confirmed by the pivot decision …\nReturn the latest PoS pivot decision processed in …\nThe deferred epoch count before a confirmed epoch.\nFind the first state valid block on the pivot chain after …\nIt indicates whether the states stored in header is …\nThe timer chain beta ratio\nThe timer block ratio in timer chain algorithm\n<code>ConfirmationMeter</code> computes an approximate <em>local view</em> …\nThe <code>ConsensusGraph</code> calls this function for every inserted …\nQuery the confirmation hash of a specific block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is an expensive function to check whether the current …\nThe <code>ConsensusGraph</code> invokes this function when making a …\n<code>ConsensusGraphInner</code> invokes this function to recompute …\nThis is the function that should be invoked every 2 * …\nConsensusExecutor processes transaction execution tasks.\nThe EpochExecutionTask struct includes all the information …\nThe RewardExecutionInfo struct includes most information …\nExecute transactions in the blocks to collect traces.\nExecute the epoch synchronously\nCompute the epoch <code>epoch_hash</code>, and skip it if already …\nThis is a blocking call to force the execution engine to …\nEnqueue the epoch to be executed by the background …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handler to provide functions to handle <code>ExecutionTask</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait until all tasks currently in the queue to be executed …\nconstruct_pivot_state() rebuild pivot chain state info …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe top level function invoked by ConsensusGraph to insert …\nFIXME: redesign this trait\nReturn transaction info for clients. Note that the skipped …\nManages pivot block hash records for chain fork validation …\nConfiguration for initializing PivotHint.\nValidates if switching to a target branch is allowed based …\nExpected keccak hash of the Page Digests Part\nPath to the pivot hint file\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new PivotHint instance by loading and validating …\nThis includes the interfaces that the PoW consensus needs …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a PoS block by its ID.\nWait for initialization.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the latest committed PoS block ID. This will become …\nCheck if <code>me</code> is equal to or extends <code>preds</code> (parent and …\nThis is the cap of the size of the anticone barrier. If we …\nThis is the cap of the size of …\nThe initial storage point proportion after CIP107 is …\nThe initial base price share proportion after CIP137 is …\nThe minimum timer diff value for the adaptive test in …\nThe maximum value of adaptive block generation risk that a …\nThe maximum number of epochs that the confirmation meter …\nThis is the minimum risk that the confirmation meter tries …\nThe batch step in the confirmation meter to do the …\nThis controls how often the confirmation meter updates. …\nThe maximum number of blocks to be executed in each epoch\nThe initial and minimum base price\nHere is the delay for us to recycle those orphaned blocks …\n<code>REWARD_EPOCH_COUNT</code> needs to be larger than …\nAbout 2020.12.11-15:30 for both the height and the block …\nColumn for verified roots of blamed headers on light nodes\nColumn for Blocks.\nColumn for block traces\nColumn for Epoch Sets\nColumn for block number index\nColumn for miscellaneous items\nColumn for PoS interest reward info.\nColumn for Transaction Index\nA cache for arbitrary key-value pairs.\nModes for updating caches.\nInvalidate entries.\nShould be used to get database key associated with given …\nNumber of columns in DB\nOverwrite entries.\nShould be used to read values from database.\nThe db key associated with this value.\nShould be used to write value into database.\nDeletes key from the database.\nReturns true if given value exists.\nReturns true if given value exists either in cache or in …\nWrites the values into the database and updates the cache.\nWrites and removes the values into the database and …\nReturns the argument unchanged.\nQuery the cache for a key’s associated value.\nInsert an entry into the cache and get the old value.\nCalls <code>U::from(self)</code>.\nInvalidate an entry in the cache, getting the old value if …\nReturns db key.\nReturns value for given key.\nReturns value for given key either in cache or in database.\nWrites the value into the database.\nWrites the value into the database and updates the cache.\nAny exception happened while processing the transaction. …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code> test_net_version</code> is used to update the genesis author so …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandler is responsible for maintaining peer …\nThe version to pass to Message for their lifetime …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRelay raw transaction to all peers.\nVector of bytes.\nCheck if we received deprecated message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a new IO timer. ‘IoHandler::timeout’ will be …\nThis message is introduced since this version.\nThis message is valid until the specified version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsensus for the Diem Core blockchain\nMempool is used to hold transactions that have been …\nUsed to perform catching up between nodes for committed …\nSign and broadcast an election transaction with a target …\nSign and broadcast a pivot decision transaction\nConsensusDB\nMake the node propose a block with given round, parent, …\nMake the node vote for the given proposal regardless of …\nRead-only command Get the chosen to-vote proposal\nReturn if the node is voting.\nTrigger local_timeout\nConsensus network task\nTrigger new_round_timeout\nTrigger propose_timeout\nStart voting and return errors if it fails. The first …\nStop broadcasting elections to prepare for a restart …\nStop voting and return errors if it fails.\nTest command sent by RPCs to construct attack cases.\nblock retrieval message sender\nconsensus message sender\nDiemBFT implementation\ndelete_blocks_and_quorum_certificates\nDelete the timeout certificates\ndelete_last_vote_msg\nDelete all staking events before an PoW epoch number after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates consensus’s subscription to reconfiguration …\nGet all consensus blocks.\nget_data\nget_ledger_block\nGet qc for not committed blocks.\nGet all consensus QCs.\nSave staking events between two pivot decisions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnew\nEstablishes the initial connections with the peers and …\nSave pow staking events.\nsave_blocks_and_quorum_certificates\nsave_highest_timeout_certificate\nsave_ledger_blocks\nsave_vote\nstart\nProposed block parent. A valid QC will be retrieved to …\nPayload for the proposed block. The PoW internal contract …\nProposed block round.\nHelper function to start consensus based on configuration …\nNotification from state sync to mempool of commit event. …\nSuccessfully executed and committed txn\nMessage sent from consensus to mempool.\nResponse sent from mempool to consensus.\nRequest to pull block to submit to consensus.\nBlock to submit to consensus\nNotifications about <em>rejected</em> committed txns.\nTimestamp of committed block.\nThe error message if <code>success</code> is false.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterface between Mempool and Network layers.\nBroadcast request issued by the sender.\nBroadcast ack issued by the receiver.\nContainer for exchanging transactions with other Mempools.\nJust a convenience struct to keep all the network proxy …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide a LIFO buffer for each (Author, MessageType) key\nEstablishes the initial connections with the peers and …\nA backpressure signal from the recipient when it is …\nUnique id of sync request. Can be used by sender for …\nRetry signal from recipient if there are txns in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturn error if pow_consensus has not been initialized or …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContainer for exchanging transactions with other Mempools.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe interface from Consensus to Networking layer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nnetwork service\nhotstuff protocol handler\nSend msg to peer\nSend a RPC to the destination peer using the …\nSend msg to self\nSend a single message to the destination peer using the …\nSend a single message to the destination peers using the …\nSend a msg to all connected PoS nodes. They may or may not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSend request to remote peer with delay mechanism. If …\nSend waiting requests that their backoff delay have passes\nSend a unary rpc request to remote peer <code>recipient</code>.\nSupport to downcast trait to concrete request type.\nTrait of request message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify the handler when error happens for the request.\nReturn unfinished_requests\nSend request to the specified peer. If peer is <code>None</code> or …\nThis is for RPC request. Set the notification handle for …\nRequest timeout for resend purpose.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterface between State Sync and Network layers.\nCreates and bootstraps new state syncs and creates clients …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe response is built relative to the highest available …\nThe response is built relative to the target (or end of …\nWe’re currently considering several types of chunk …\nThe response is built relative to a LedgerInfo at a given …\nEpoch the chunk response is supposed to belong to (i.e., …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe response should start with <code>known_version + 1</code>.\nMax size of a chunk response.\nThe target of the given request.\nThe returned chunk is bounded by the end of the …\nDuring the initial catchup upon startup the chunks carry …\nA response to <code>TargetType::HighestAvailable</code> chunk request …\nThe response can carry different LedgerInfo types …\nA typical response carries a LedgerInfo with signatures …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe proofs are built relative to the LedgerInfo in …\nChunk of transactions with proof corresponding to the …\nThe version of the LedgerInfo relative to which the …\nA commit notification to notify state sync of new commits.\nMessages used by the StateSyncClient for communication …\nA client used for communicating with a …\nA sync request for a specified target ledger info.\nNotifies state sync about newly committed transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns information about the state sync internal state. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSync node’s state to target ledger info (LI). In case of …\nWaits until state sync is caught up with the waypoint …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProxies interactions with execution and storage for state …\nExecute and commit a batch of transactions\nGets chunk of transactions given the known version, target …\nGet the epoch changing ledger info for the given epoch so …\nGet ledger info at an epoch boundary version.\nSync the local state with the latest in storage.\nReturns the ledger’s timestamp for the given version in …\npublishes on-chain config updates to subscribed components\nState sync network messages\nThe interface from StateSync to Networking layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSyncState contains the following fields:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the highest available version in the local …\nThis is a data structure to cache the computed target …\nConvert boundary to its original difficulty. Basically …\nCompute [2^256 / x], where x &gt;= 2 and x &lt; 2^256.\nConvert difficulty to the target boundary. Basically just …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis should only be used in tests.\nThis function computes the target difficulty of the next …\nThis struct maintains some inner state of consensus graph.\nThis struct maintains some inner state of network layer.\nThis struct maintains some inner state of synchronization …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe version to pass to Message for their lifetime …\nBoth Archive and Full node go through the following phases:\nTODO Be more specific about which functions only return …\nGet the current number of blocks in the synchronization …\nReturn None if <code>hash</code> is not in sync graph\nReturn None if <code>hash</code> is not in sync graph\nWhether the block body is ready.\nReturn None if <code>hash</code> is not in sync graph\nThe set of blocks that we need to download block bodies in …\nTODO(lpl): Only triggered when pos commits new blocks? …\nThe indices of the children of the block.\nConstruct the states along the pivot chain, set all …\nCompute the expected difficulty for a block given its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe blocks whose timestamps are near future. They will be …\nRetrieves the heartbeat timeout peers, including …\nThe status of graph connectivity in the current block view.\nReturn the index of the inserted block.\nIf we are in <code>SyncHeaders</code> or <code>CatchUpCheckpoint</code> phase, we …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe timestamp in seconds when graph_status updated\nThe latest …\nSet to <code>true</code> in <code>CatchUpCheckpointPhase</code> and …\nThe indices of blocks whose graph_status is not …\nThe index of the parent of the block.\nWhether parent is in old era and already reclaimed\nThe number of blocks referenced by the block but haven’t …\nThis includes the blocks whose parent and referees are all …\nThe following fields are used to control how to handle …\nIn full/archive node, this function can be invoked during …\nThe indices of the blocks referenced by the block.\nThe indices of the blocks referencing the block.\nRemove all blocks in <code>to_remove_set</code> and their future set …\nRemove all blocks which have not been updated for a long …\nRequest missing block bodies from random peers in batches.\nThe epoch id of the remotely synchronized state. This is …\nUpdates the heartbeat for the specified peer. It takes no …\nCommon key container for all inflight requests. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor requested compact block, if a compact block is returned\nhandle the RLP encoded message with given context <code>ctx</code>. If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSupport to downcast trait to concrete request type.\nTrait of request message\nWhen a header or block is requested by the <code>RequestManager</code>, …\nRemove from inflight keys when a block is received.\nDownload cast request to specified request type. If …\nRemove from inflight keys when a epoch is received.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRemove inflight keys when a header is received.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf all requested items are already in flight, then do not …\nNotify the handler when the request gets cancelled by …\nNotify the handler when the request gets cancelled by …\nNotify the handler when the request gets timeout.\nNotify the handler when the request gets timeout.\nCleanup the inflight request items when peer disconnected …\nEpoch-gap-limit required by this request.\nEpoch-gap-limit required by this request.\nReturn unfinished_requests\nSend request to remote peer with delay mechanism. If …\nRequired peer capability to send this request\nRequired peer capability to send this request\nWhen a request failed (send fail, invalid response or …\nSend waiting requests that their backoff delay have passes.\nSend request to the specified peer. If peer is <code>None</code> or …\nRequest timeout for resend purpose.\nReturn block hashes in <code>request</code> if it’s requesting blocks.\nBefore send a request, check if its items already in …\nThis struct is not implemented as thread-safe since …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method is only used in tests and benchmarks.\nMeasured block propagation delay in <em>seconds</em>. This will …\nThe threshold controlling whether a node is in catch-up …\nThe threshold controlling whether we should query …\nThe max number of blocks that are to be sent for compact …\nThe max number of epochs whose hashes are to be responded …\nThe max number of headers that are to be sent for header …\nThis threshold controlling whether a node should request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ngas limit exceeded maximum value\ncontent retrieves the ready and deferred transactions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn <code>(pending_txs, first_tx_status, pending_count)</code>.\nTry to insert <code>signed_transaction</code> into transaction pool.\nTry to insert <code>transactions</code> into transaction pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstats retrieves the length of ready and deferred pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply all checks\nCheck transactions in local mode, may have more constraints\nIf a transaction is not valid now, but can become valid in …\nCheck transactions for received blocks in sync graph, may …\nCompute a proof for the <code>tx_index_in_block</code>-th receipt in a …\nCompute a proof for the <code>tx_index_in_block</code>-th receipt in …\nCompute epoch receipts root. This value is stored in the …\nCompute a proof for the <code>tx_index_in_block</code>-th transaction …\nCompute block transaction root. This value is stored in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNote that this function returns <em>pow_hash</em> of the block, not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse <code>block_index_proof</code> to get the correct block receipts …\nUse <code>proof</code> to verify that <code>tx_hash</code> is indeed the …\nCheck basic header parameters. This does not require …\nPhase 1 quick block verification. Only does checks that …")