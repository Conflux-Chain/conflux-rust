searchState.loadedDescShard("diem_vault_client", 0, "The various set of capabilities available to a policy …\nClient provides a client around the restful interface to a …\nKey backup / restore format Example: { “policy”:{ “…\nRepresents the set of capabilities used within a policy.\nThis data structure is used to represent both policies …\nRepresents the policy for a given path.\nProvides a simple wrapper for all read APIs.\nCreates a new token or identity for accessing Vault. The …\nDelete a specific secret store\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all stored secrets\nProcesses a generic response returned by a vault request. …\nProcesses the response returned by a policy list vault …\nProcesses the response returned by a policy read vault …\nProcesses the response returned by a secret list vault …\nProcesses the response returned by a secret read vault …\nProcesses the response returned by a token create vault …\nProcesses the response returned by a token renew vault …\nProcesses the response returned by a transit key create …\nProcesses the response returned by a transit key export …\nProcesses the response returned by a transit key list …\nProcesses the response returned by a transit key read …\nProcesses the response returned by a transit key restore …\nProcesses the response returned by a transit key sign …\nProcesses the response returned by a seal-status() vault …\nRetrieves the policy at the given policy name.\nRead a key/value pair from a given secret store.\nCreate a new policy in Vault, see the explanation for …\nTrims the number of key versions held in vault storage. …\nReturns whether or not the vault is unsealed (can be read …\nCreate or update a key/value pair in a given secret store.\nProvide an instance of Vault if vault is installed on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates a new instance of Vault if one is available …\nThis will return the vault host or panic.\nThis will return the vault host, if vault was started …")